axis.title.y = element_blank(),
axis.text.y = element_text(family = "RMN", size = 20),
strip.text = element_text(family = "RMN", size = 20),
legend.title = element_text(family = "RMN", size = 20),
legend.text = element_text(family = "RMN", size = 20),
legend.position = "bottom")
gpComparerecFN
ggsave(gpComparerecFN, filename = "C:/Users/ylc/Desktop/CIPCA和PCA故障预测REC.tiff", dpi = 1200, width = 10, height = 10)
# plot ROC
# Compare IPCA and PCA
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/dataResultPC5.RData")
library(ggplot2)
library(dplyr)
windowsFonts(RMN = windowsFont("Times New Roman"))
dataIPCAROC <- dataIPCA5ROC
dataPCAROC <- dataPCA5ROC
dataIPCAROC$Method <- rep("IPCA", nrow(dataIPCAROC))
dataPCAROC$Method <- rep("PCA", nrow(dataPCAROC))
dataROC <- rbind(dataIPCAROC, dataPCAROC)
dataROC$Neurons <- factor(dataROC$Neurons,
levels = c(10, 15, 20, 25, 30, 35, 40, 45),
labels = c("10 Hidden Neurons", "15 Hidden Neurons", "20 Hidden Neurons", "25 Hidden Neurons", "30 Hidden Neurons", "35 Hidden Neurons", "40 Hidden Neurons", "45 Hidden Neurons"))
dataROC$Method <- factor(dataROC$Method, levels = c("PCA", "IPCA"), ordered = TRUE)
gpROCbyMethod <- ggplot(data = dataROC %>% filter(Type=="mean")) +
geom_line(aes(x = FPR, y = TPR, color = Method), size = 1.5) +
scale_x_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1)) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1)) +
scale_color_discrete(name = "Method:", breaks = c("PCA", "IPCA"), labels = c("PCA-BPNN", "CIPCA-BPNN")) +
labs(x = "False positive rate", y = "True positive rate") +
facet_wrap(.~Neurons, nrow = 2) +
theme(axis.title.x = element_text(family = "RMN", size = 15),
axis.text.x = element_text(family = "RMN", size = 15),
axis.title.y = element_text(family = "RMN", size = 15),
axis.text.y = element_text(family = "RMN", size = 15),
strip.text = element_text(family = "RMN", size = 15),
legend.title = element_text(family = "RMN", size = 15),
legend.text = element_text(family = "RMN", size = 15),
legend.position = "bottom")
gpROCbyMethod
gpROCbyMethod <- ggplot(data = dataROC %>% filter(Type=="mean")) +
geom_line(aes(x = FPR, y = TPR, color = Method), size = 1.5) +
scale_x_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1)) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1),
labels = c(0, 0.25, 0.5, 0.75, 1)) +
scale_color_discrete(name = "Method:", breaks = c("PCA", "IPCA"), labels = c("PCA-BPNN", "CIPCA-BPNN")) +
labs(x = "False positive rate", y = "True positive rate") +
facet_wrap(.~Neurons, nrow = 2) +
theme(axis.title.x = element_text(family = "RMN", size = 20),
axis.text.x = element_text(family = "RMN", size = 20),
axis.title.y = element_text(family = "RMN", size = 20),
axis.text.y = element_text(family = "RMN", size = 20),
strip.text = element_text(family = "RMN", size = 20),
legend.title = element_text(family = "RMN", size = 20),
legend.text = element_text(family = "RMN", size = 20),
legend.position = "bottom")
gpROCbyMethod
ggsave(gpROCbyMethod, filename = "C:/Users/ylc/Desktop/ROC曲线图.tiff", dpi = 1200, width = 16, height = 9)
data.F1 <- dataFault[which(dataFault$flight == "F1"), c("TimeS", "RCIN.C2", "RCIN.C1")]
dataFault <- read.csv("dataFault.csv")
dataNormal <- read.csv("dataNormal2.csv")
library(ggplot2)
windowsFonts(RMN = windowsFont("Times New Roman"))
data.F1 <- dataFault[which(dataFault$flight == "F1"), c("TimeS", "RCIN.C2", "RCIN.C1")]
data.F1 <- data.F1[order(data.F1$TimeS), ]
data.F1 <- data.frame(value = c(data.F1$RCIN.C1, data.F1$RCIN.C2),
variable = rep(c("RCIN.C1", "RCIN.C2"), each = nrow(data.F1)),
type = rep("Fault", nrow(data.F1)),
time = data.F1$TimeS-data.F1$TimeS[1]+1)
data.F15 <- dataFault[which(dataFault$flight == "F15"), c("TimeS", "EKF3.IMX", "RCIN.C3")]
data.F15 <- data.F15[order(data.F15$TimeS), ]
data.F15 <- data.frame(value = c(data.F15$EKF3.IMX, data.F15$RCIN.C3),
variable = rep(c("EKF3.IMX", "RCIN.C3"), each = nrow(data.F15)),
type = rep("Fault", nrow(data.F15)),
time = data.F15$TimeS-data.F15$TimeS[1]+1)
data.1N13D <- dataNormal[which(dataNormal$flight == "1N13D"), c("TimeS", "RCIN.C1", "RCIN.C2", "RCIN.C3", "EKF3.IMX")]
data.1N13D <- data.1N13D[order(data.1N13D$TimeS), ]
data.1N13D <- data.frame(value = c(data.1N13D$RCIN.C1, data.1N13D$RCIN.C2, data.1N13D$RCIN.C3, data.1N13D$EKF3.IMX),
variable = rep(c("RCIN.C1", "RCIN.C2", "RCIN.C3", "EKF3.IMX"), each = nrow(data.1N13D)),
type = rep("Normal", nrow(data.1N13D)),
time = data.1N13D$TimeS-data.1N13D$TimeS[1]+1)
dataVariable <- rbind(data.F15, data.F1, data.1N13D)
dataVariable$variable <- factor(dataVariable$variable, levels = c("RCIN.C1", "RCIN.C2", "RCIN.C3", "EKF3.IMX"), ordered = TRUE)
gpVariable <- ggplot(data = dataVariable) +
geom_point(aes(x = time/1000, y = value, color = type), size = 0.5) +
facet_grid(variable~type, scales = "free_y") +
labs(x = "Time (s)") +
theme(axis.title.x = element_text(family = "RMN", size = 20),
axis.text.x = element_text(family = "RMN", size = 20),
axis.title.y = element_blank(),
axis.text.y = element_text(family = "RMN", size = 20),
strip.text = element_text(family = "RMN", size = 20),
legend.position = "none")
gpVariable
ggsave(gpVariable, filename = "C:/Users/ylc/Desktop/变量特征.tiff", dpi = 1200, width = 14, height = 10)
dataIndexCompare
View(dataIndexCompare)
# Calculate the AUC of FN
functionCalculateAUC <- function(List){
library(pROC)
auc <- c()
for(i in 1:length(List)){
data <- List[[i]]
roc <- roc(data$True, data$ResultPCAFN)
auc[i] <- auc(roc)
}
AUC <- mean(auc)
return(AUC)
}
IPCAH10AUC <- functionCalculateAUC(listH10FNResult)
IPCAH15AUC <- functionCalculateAUC(listH15FNResult)
IPCAH20AUC <- functionCalculateAUC(listH20FNResult)
install.packages("pROC")
# Calculate the AUC of FN
functionCalculateAUC <- function(List){
library(pROC)
auc <- c()
for(i in 1:length(List)){
data <- List[[i]]
roc <- roc(data$True, data$ResultPCAFN)
auc[i] <- auc(roc)
}
AUC <- mean(auc)
return(AUC)
}
IPCAH10AUC <- functionCalculateAUC(listH10FNResult)
IPCAH15AUC <- functionCalculateAUC(listH15FNResult)
install.packages("pROC")
# Calculate the AUC of FN
functionCalculateAUC <- function(List){
library(pROC)
auc <- c()
for(i in 1:length(List)){
data <- List[[i]]
roc <- roc(data$True, data$ResultPCAFN)
auc[i] <- auc(roc)
}
AUC <- mean(auc)
return(AUC)
}
IPCAH10AUC <- functionCalculateAUC(listH10FNResult)
listH10FNResult
# Calculate the AUC of FN
functionCalculateAUC <- function(List){
library(pROC)
auc <- c()
for(i in 1:length(List)){
data <- List[[i]]
roc <- roc(data$True, data$ResultEnsemble)
auc[i] <- auc(roc)
}
AUC <- mean(auc)
return(AUC)
}
IPCAH10AUC <- functionCalculateAUC(listH10FNResult)
IPCAH15AUC <- functionCalculateAUC(listH15FNResult)
IPCAH20AUC <- functionCalculateAUC(listH20FNResult)
IPCAH25AUC <- functionCalculateAUC(listH25FNResult)
IPCAH30AUC <- functionCalculateAUC(listH30FNResult)
IPCAH35AUC <- functionCalculateAUC(listH35FNResult)
IPCAH40AUC <- functionCalculateAUC(listH40FNResult)
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/PCA-NF/resultPCAH45FNTable.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/PCA-NF/resultPCAH30FNTable.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/PCA-NF/resultPCAH40FNTable.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/PCA-NF/resultPCAH25FNTable.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/PCA-NF/resultPCAH35FNTable.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/PCA-NF/resultPCAH20FNTable.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/PCA-NF/resultPCAH15FNTable.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/PCA-NF/resultPCAH10FNTable.RData")
# Calculate the AUC of FN
functionCalculateAUC <- function(List){
library(pROC)
auc <- c()
for(i in 1:length(List)){
data <- List[[i]]
roc <- roc(data$True, data$ResultPCAFN)
auc[i] <- auc(roc)
}
AUC <- mean(auc)
return(AUC)
}
PCAH10AUC <- functionCalculateAUC(listPCAH10FNResult)
PCAH15AUC <- functionCalculateAUC(listPCAH15FNResult)
PCAH20AUC <- functionCalculateAUC(listPCAH20FNResult)
PCAH25AUC <- functionCalculateAUC(listPCAH25FNResult)
PCAH30AUC <- functionCalculateAUC(listPCAH30FNResult)
PCAH35AUC <- functionCalculateAUC(listPCAH35FNResult)
PCAH40AUC <- functionCalculateAUC(listPCAH40FNResult)
PCAH45AUC <- functionCalculateAUC(listPCAH45FNResult)
dataPC5AUC <- data.frame(AUC = c(IPCAH10AUC, IPCAH15AUC, IPCAH20AUC, IPCAH25AUC, IPCAH30AUC, IPCAH35AUC, IPCAH40AUC, IPCAH45AUC,
PCAH10AUC, PCAH15AUC, PCAH20AUC, PCAH25AUC, PCAH30AUC, PCAH35AUC, PCAH40AUC, PCAH45AUC),
Neurons = rep(c(10, 15, 20, 25, 30, 35, 40), times = 2),
Type = rep(c("IPCA", "PCA"), each = 7))
IPCAH45AUC <- functionCalculateAUC(listH45FNResult)
roc <- roc(data$True, data$ResultEnsemble)
# Calculate the AUC of FN
functionCalculateAUC <- function(List){
library(pROC)
auc <- c()
for(i in 1:length(List)){
data <- List[[i]]
roc <- roc(data$True, data$ResultEnsemble)
auc[i] <- auc(roc)
}
AUC <- mean(auc)
return(AUC)
}
IPCAH45AUC <- functionCalculateAUC(listH45FNResult)
dataPC5AUC <- data.frame(AUC = c(IPCAH10AUC, IPCAH15AUC, IPCAH20AUC, IPCAH25AUC, IPCAH30AUC, IPCAH35AUC, IPCAH40AUC, IPCAH45AUC,
PCAH10AUC, PCAH15AUC, PCAH20AUC, PCAH25AUC, PCAH30AUC, PCAH35AUC, PCAH40AUC, PCAH45AUC),
Neurons = rep(c(10, 15, 20, 25, 30, 35, 40), times = 2),
Type = rep(c("IPCA", "PCA"), each = 7))
dataPC5AUC <- data.frame(AUC = c(IPCAH10AUC, IPCAH15AUC, IPCAH20AUC, IPCAH25AUC, IPCAH30AUC, IPCAH35AUC, IPCAH40AUC, IPCAH45AUC,
PCAH10AUC, PCAH15AUC, PCAH20AUC, PCAH25AUC, PCAH30AUC, PCAH35AUC, PCAH40AUC, PCAH45AUC),
Neurons = rep(c(10, 15, 20, 25, 30, 35, 40), times = 2),
Type = rep(c("IPCA", "PCA"), each = 8))
dataPC5AUC <- data.frame(AUC = c(IPCAH10AUC, IPCAH15AUC, IPCAH20AUC, IPCAH25AUC, IPCAH30AUC, IPCAH35AUC, IPCAH40AUC, IPCAH45AUC,
PCAH10AUC, PCAH15AUC, PCAH20AUC, PCAH25AUC, PCAH30AUC, PCAH35AUC, PCAH40AUC, PCAH45AUC),
Neurons = rep(c(10, 15, 20, 25, 30, 35, 40, 45), times = 2),
Type = rep(c("IPCA", "PCA"), each = 8))
write.csv(dataPC5AUC, "dataPC5AUC.csv", row.names = FALSE)
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/dataResultPC5.RData")
library(ggplot2)
library(dplyr)
windowsFonts(RMN = windowsFont("Times New Roman"))
################################
# Step1
# IPCA
# It shows that the effect of the integrated learner is better than that of the base learner
# it's better as the number of neurons increases
dataIPCAINdexFN <- tbl_df(dataIPCA5IndexFN)
dataIPCAIndexbyGroupFN <- dataIPCAINdexFN %>%
group_by(Neurons, Type, Index, Index) %>%
summarise(mean=mean(Value))
dataIPCAIndexbyGroupFN$Type <- factor(dataIPCAIndexbyGroupFN$Type, levels = c("Lower", "Upper", "Ensemble"), ordered = TRUE)
gpIPCAaccbyGroupFN <- ggplot(data = dataIPCAIndexbyGroupFN %>% filter(Index=="Accuracy"), aes(x = Neurons, y = mean, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", width = 4) +
scale_fill_discrete(name = "Classifier type:", breaks = c("Lower", "Upper", "Ensemble"), labels = c("Lower bond", "Upper bond", "Ensemble")) +
labs(x = "Number of hidden neurons") +
scale_x_continuous(breaks = c(10, 15, 20, 25, 30, 35, 40, 45)) +
theme(axis.title.x = element_text(family = "RMN", size = 20),
axis.text.x = element_text(family = "RMN", size = 20),
axis.title.y = element_blank(),
axis.text.y = element_text(family = "RMN", size = 20),
strip.text = element_text(family = "RMN", size = 20),
legend.title = element_text(family = "RMN", size = 20),
legend.text = element_text(family = "RMN", size = 20),
legend.position = "bottom")
gpIPCAaccbyGroupFN
gpIPCAprebyGroupFN <- ggplot(data = dataIPCAIndexbyGroupFN %>% filter(Index=="Precision"), aes(x = Neurons, y = mean, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", width = 4) +
scale_fill_discrete(name = "Classifier type:", breaks = c("Lower", "Upper", "Ensemble"), labels = c("Lower bond", "Upper bond", "Ensemble")) +
labs(x = "Number of hidden neurons") +
scale_x_continuous(breaks = c(10, 15, 20, 25, 30, 35, 40, 45)) +
theme(axis.title.x = element_text(family = "RMN", size = 20),
axis.text.x = element_text(family = "RMN", size = 20),
axis.title.y = element_blank(),
axis.text.y = element_text(family = "RMN", size = 20),
strip.text = element_text(family = "RMN", size = 20),
legend.title = element_text(family = "RMN", size = 20),
legend.text = element_text(family = "RMN", size = 20),
legend.position = "bottom")
gpIPCAprebyGroupFN
gpIPCArecbyGroupFN <- ggplot(data = dataIPCAIndexbyGroupFN %>% filter(Index=="Recall"), aes(x = Neurons, y = mean, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", width = 4) +
scale_fill_discrete(name = "Classifier type:", breaks = c("Lower", "Upper", "Ensemble"), labels = c("Lower bond", "Upper bond", "Ensemble")) +
labs(x = "Number of hidden neurons") +
scale_x_continuous(breaks = c(10, 15, 20, 25, 30, 35, 40, 45)) +
theme(axis.title.x = element_text(family = "RMN", size = 20),
axis.text.x = element_text(family = "RMN", size = 20),
axis.title.y = element_blank(),
axis.text.y = element_text(family = "RMN", size = 20),
strip.text = element_text(family = "RMN", size = 20),
legend.title = element_text(family = "RMN", size = 20),
legend.text = element_text(family = "RMN", size = 20),
legend.position = "bottom")
gpIPCArecbyGroupFN
# # PCA
# # It shows that the effect of the integrated learner is better than that of the base learner
# # it's better as the number of neurons increases
dataPCAINdexFN <- tbl_df(dataPCA5IndexFN)
dataPCAIndexbyGroupFN <- dataPCAINdexFN %>%
group_by(Neurons, Type, Index, Index) %>%
summarise(mean=mean(Value))
# Compare the Index of PCA and IPCA
dataIndexCompare <- rbind(dataIPCAIndexbyGroupFN %>%
filter(Type=="Ensemble"),
dataPCAIndexbyGroupFN)
dataIndexCompare$Type[which(dataIndexCompare$Type=="Ensemble")] <- "IPCA"
dataIndexCompare$Type <- factor(dataIndexCompare$Type, levels = c("PCA", "IPCA"), ordered = TRUE)
View(dataIndexCompare)
dataFault <- read.csv("dataFault.csv")
dataNormal <- read.csv("dataNormal2.csv")
library(ggplot2)
windowsFonts(RMN = windowsFont("Times New Roman"))
dataFlight <- rbind(dataFault, dataNormal)
dataFlight <- dataFlight[, -c(1:4)]
data.cor.Flight <- cor(dataFlight)
library(ggplot2)
library(GGally)
gpCor.Flight <- ggcorr(data.cor.Flight, hjust = 1, layout.exp = 10, family = 'RMN') +
scale_fill_gradient2(low = "darkred", mid = "white", high = "darkred", name = "Correlation\ncoefficient") +
theme(legend.text = element_text(family = "RMN", size = 15),
legend.title = element_text(family = "RMN", size = 15))
gpCor.Flight
ggsave(gpCor.Flight, filename = "C:/Users/ylc/Desktop/飞参变量相关性.tiff", dpi = 1200, width = 10, height = 10)
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH45FNIPCA.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH40FNIPCA.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH35FNIPCA.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH30FNIPCA.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH25FNIPCA.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH20FNIPCA.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH15FNIPCA.RData")
load("C:/Users/ylc/nutstore/research/16-CIPCABPNN/test/result/CIPCA-NF/resultH10FNIPCA.RData")
library(ggplot2)
library(dplyr)
windowsFonts(RMN = windowsFont("Times New Roman"))
mycolors <- c("#F8766D", "#00BA38", "#619CFF")
functionResultByTime <- function(List, t=1){
library(dplyr)
dataResults <- List[[1]]
for(i in 2:length(List)){
dataResults <- rbind(dataResults, List[[i]])
}
dataResults$ResultEnsemble <- round(dataResults$ResultEnsemble)
dataResults$ResultEnsemble[which(dataResults$ResultEnsemble < 0)] <- 0
dataResults$ResultEnsemble[which(dataResults$ResultEnsemble > 1)] <- 1
dataResults$Time <- as.numeric(dataResults$Time)
dataResults <- dataResults[order(dataResults$Time), ]
names(dataResults) <- c("pre", "true", "time")
n <- ceiling(max(dataResults$time)/(t*1000))
acc <- c()
pre <- c()
rec <- c()
time <- c()
for(i in 1:n){
raw <- which((dataResults$time > (i-1)*t*1000) & (dataResults$time <= i*t*1000))
data <- dataResults[raw, ]
data.table <- data.frame(table(data$pre, data$true))
data.table <- tbl_df(data.table)
names(data.table) <- c("pre", "true", "n")
tp <- as.numeric(data.table%>%filter((pre==1)&(true==1))%>%select(n))
tn <- as.numeric(data.table%>%filter((pre==1)&(true==0))%>%select(n))
fp <- as.numeric(data.table%>%filter((pre==0)&(true==1))%>%select(n))
fn <- as.numeric(data.table%>%filter((pre==0)&(true==0))%>%select(n))
if(is.na(tp)){tp<-0}
if(is.na(tn)){tn<-0}
if(is.na(fp)){fp<-0}
if(is.na(tn)){tn<-0}
acc[i] <- (tp+fn)/sum(data.table$n)
pre[i] <- tp/(tp+tn)
rec[i] <- tp/(tp+fp)
time[i] <- (i-1)*t
}
result <- data.frame(acc = acc, pre = pre, rec = rec, time = time)
return(result)
}
functionTimeData <- function(data){
dataR <- data.frame(value = c(data$acc, data$pre, data$rec),
time = c(data$time, data$time, data$time),
Index = rep(c("Accuracy", "Precision", "Recall"), each = nrow(data)))
return(dataR)
}
dataResultsH10 <- functionResultByTime(listH10FNResult, t=1)
dataH10 <- functionTimeData(dataResultsH10)
dataResultsH15 <- functionResultByTime(listH15FNResult, t=1)
dataH15 <- functionTimeData(dataResultsH15)
dataResultsH20 <- functionResultByTime(listH20FNResult, t=1)
dataH20 <- functionTimeData(dataResultsH20)
dataResultsH25 <- functionResultByTime(listH25FNResult, t=1)
dataH25 <- functionTimeData(dataResultsH25)
dataResultsH30 <- functionResultByTime(listH30FNResult, t=1)
dataH30 <- functionTimeData(dataResultsH30)
dataResultsH35 <- functionResultByTime(listH35FNResult, t=1)
dataH35 <- functionTimeData(dataResultsH35)
dataResultsH40 <- functionResultByTime(listH40FNResult, t=1)
dataH40 <- functionTimeData(dataResultsH40)
dataResultsH45 <- functionResultByTime(listH45FNResult, t=1)
dataH45 <- functionTimeData(dataResultsH45)
data.Index.byTime <- rbind(dataH10, dataH15, dataH20, dataH25, dataH30, dataH35, dataH40, dataH45)
data.Index.byTime$Neurons <- rep(c("10 Hidden Neurons",
"15 Hidden Neurons",
"20 Hidden Neurons",
"25 Hidden Neurons",
"30 Hidden Neurons",
"35 Hidden Neurons",
"40 Hidden Neurons",
"45 Hidden Neurons"),
each = 30*3)
data.Index.byTime$Neurons <- factor(data.Index.byTime$Neurons,
levels = c("10 Hidden Neurons",
"15 Hidden Neurons",
"20 Hidden Neurons",
"25 Hidden Neurons",
"30 Hidden Neurons",
"35 Hidden Neurons",
"40 Hidden Neurons",
"45 Hidden Neurons"),
ordered = TRUE)
data.Index.byTime$Index <- factor(data.Index.byTime$Index, levels = c("Accuracy", "Precision", "Recall"), ordered = TRUE)
data.Index.byTime$time <- factor(data.Index.byTime$time, levels = c(29:0), ordered = TRUE)
write.csv(data.Index.byTime, "databytime.csv", row.names = FALSE)
setwd("C:/Users/ylc/nutstore/code/R-work")
library(flexclust)
page(cclust)
cclust
setwd("C:/Users/ylc/nutstore/code/R-work/learn/packages/AssociationRelationship")
data("Groceries")
install.packages("arules")
install.packages("arulesViz")
library(arules)
data("Groceries")
View(Groceries)
summary(Groceries)
Groceries@data
Groceries@itemInfo
data("Groceries")
summary(Groceries)
length(Groceries)
# 查看前20条购买记录
inspect(Groceries[1:20])
# apriori算法
rul <- apriori(Groceries, parameter = list(support = 0.005, confidence = 0.65))
# 查看频繁项集
inspect(rul)
# 按照lift顺序查看，也可以按照support或confidence进行查看
rul_lift <- sort(rul, by = "lift")
inspect(rul_lift)
# 应用：假如商场经理想要促销chocolate,该如何做
rul1 <- apriori(Groceries, parameter = list(support = 0.002, confidence = 0.2, maxlen = 3), appearance = list(rhs = "chocolate", default = "lhs"))
rul1
inspect(rul1)
# 规则评估
# 规则排序
# 按照lift顺序查看，也可以按照support或confidence进行查看
ordered_groceryrules <- sort(rul, by = "lift")
ordered_groceryrules
# 搜索规则
yogurtrules <- subset(rul, item %in% c("yogurt"))
# 注：%in%是精确匹配；%pin%是部分匹配；%ain%是完全匹配
yogurtrules
# 搜索规则
yogurtrules <- subset(rul, items %in% c("yogurt"))
# 注：%in%是精确匹配；%pin%是部分匹配；%ain%是完全匹配
yogurtrules
inspect(ordered_groceryrules)
# 注：%in%是精确匹配；%pin%是部分匹配；%ain%是完全匹配
inspect(yogurtrules)
# 可视化：使用arulesViz包自带的plot函数绘制scatter,groupd或graph等图形
library(arulesViz)
plot(rul, method = "scatterplot")
# apriori算法
rul <- apriori(Groceries, parameter = list(support = 0.005, confidence = 0.65))
plot(rul, method = "scatterplot")
# apriori算法
rul <- apriori(Groceries, parameter = list(support = 0.006, confidence = 0.25, minlen = 2))
plot(rul, method = "scatterplot")
plot(rul)
plot(rul, control = list(jitter=2, col=rev(brewer.pal(9, "Green"))), shading = "lift", method = "grouped")
plot(rul, control = list(jitter=2, shading = "lift", method = "grouped")
plot(rul, control = list(jitter=2, shading = "lift", method = "grouped"))
plot(rul, method = "grouped"))
plot(rul, method = "grouped")
plot(rul, method = "grouped", shading = "lift")
plot(rul, method = "two-key plot")
plot(rul, method = "matrix")
plot(rul, method = "matrix3D")
plot(rul, method = "mosaic")
plot(rul, method = "doubledecker")
plot(rul, method = "graph")
plot(rul, method = "paracoord")
plot(rul, method = "iplots")
# 载入arules包
library(arules)
# 加载Groceries数据集
data("Groceries")
install.packages("arules")
# 加载Groceries数据集
data("Groceries")
# 载入arules包
library(arules)
# 加载Groceries数据集
data("Groceries")
View(Groceries)
summary(Groceries)
length(Groceries)
# "Groceries"作为arules自带数据集不需要做转换处理,当用arules包处理实际数据的时候,要把数据转换为arules包识别的交易数据
# 查看前20条购买记录
inspect(Groceries[1:5])
# 进一步查看数据信息
class(Groceries)
Groceries
dim(Groceries)
colnames(Groceries)[1:5]
# basketSize表示每个transaction包含item数目，是row level；而ItemFrequency是这个item的支持度，是column level
basketSize <- size(Groceries)
summary(basketSize)
sum(basketSize) # count of all 1s in the sparse matrix
itemFreq <- itemFrequency(Groceries)
# basketSize表示每个transaction包含item数目，是row level；而ItemFrequency是这个item的支持度，是column level
basketSize <- size(Groceries)
summary(basketSize)
sum(basketSize) # count of all 1s in the sparse matrix
itemFreq <- itemFrequency(Groceries)
itemFreq[1:5]
sum(itemFreq) # 本质上代表“平均一个transaction购买的item个数
itemCount <- (itemFreq/sum(itemFreq))*sum(basketSize)
sum # itemCount表示每个item出现的次数
itemCount # itemCount表示每个item出现的次数
Groceries
