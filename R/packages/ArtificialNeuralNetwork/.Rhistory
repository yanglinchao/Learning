install.packages("pso")
library()
.libPaths()
.libPaths()
library()
install.packages("pso")
set.seed(1)
library(pso)
psoptim(rep(NA, 2), function(x){20+sum(x^2-10*cos(2*pi*x))}, lower = -5, upper = 5, control = list(abstol = 1e-8))
x = seq(from = -10, to = 10, 1000)
x
x <- seq(from = -10, to = 10, by = 0.01)
y <- 20+sum(x^2-10*cos(2*pi*x))
y
y <- 20 + x^2-10*cos(2*pi*x)
y
plot(x, y)
x <- 2
20+sum(x^2-10*cos(2*pi*x))
20+x^2-10*cos(2*pi*x)
x <- seq(from = -5, to = 5, by = 0.01)
y <- 20 + x^2-10*cos(2*pi*x)
y
plot(x, y)
psoptim(rep(NA, 2), function(x){20+sum(x^2-10*cos(2*pi*x))}, lower = -5, upper = 5, control = list(abstol = 1e-8))
data(wine)
library(nnet)
data(wine)
?wine
??wine
setwd("~/Documents/nutstore/R-work/learn/数据挖掘：R语言实战")
wine <- read.csv("winequality.csv")
setwd("~/Documents/nutstore/R-work/learn/数据挖掘：R语言实战")
wine <- read.csv("winequality.csv")
wine <- read.table("winequality.txt")
View(wine)
wine <- read.table("winequality.txt", header = TRUE, sep = ";")
View(wine)
wine <- read.table("winequality.txt", sep = ";")
View(wine)
wine <- read.table("winequality.txt", header = FALSE, sep = ";")
names(wine) <- c("FixedAcidity", "VolatileAcidity", "CitricAcid", "ResidualSugar", "Chlorides", "FreeSulfurDioxide", "TotalSulfurDioxide", "Density", "PH", "Sulphates", "Alcohol", "Quality")
wine$Quality[which(wine$Quality == 3)] <- "bad"
wine$Quality[which(wine$Quality == 4)] <- "bad"
wine$Quality[which(wine$Quality == 5)] <- "bad"
wine$Quality[which(wine$Quality == 6)] <- "mid"
wine$Quality[which(wine$Quality == 7)] <- "good"
wine$Quality[which(wine$Quality == 8)] <- "good"
wine$Quality[which(wine$Quality == 9)] <- "good"
wine$Quality <- ordered(wine$Quality, levels = c("bad", "mid", "good"))
View(wine)
summary(wine)
set.seed(71)
samp <- sample(1:4898, 3000)   #从总样本集中抽取3000个样本作为训练集
wine[samp, 1:11] <- scale01(wine[samp, ])   #对样本进行预处理
r <- 1/max(abs(wine[samp, 1:11]))   #确定参数rang的变化范围
scale01 <- function(x){
ncol <- dim(x)[2]-1   #提取预处理样本集中特征向量的个数
nrow <- dim(x)[1]   #提取预处理样本集中样本总量
new <- matrix(0, nrow, ncol)
for(i in 1:ncol){
max <- max(x[, i])
min <- min(x[, i])
for(j in 1:nrow){
new[j, i] <- (x[j, i] - min)/(max-min)
}
}
new
}
set.seed(71)
samp <- sample(1:4898, 3000)   #从总样本集中抽取3000个样本作为训练集
wine[samp, 1:11] <- scale01(wine[samp, ])   #对样本进行预处理
r <- 1/max(abs(wine[samp, 1:11]))   #确定参数rang的变化范围
set.seed(101)
library(nnet)
model1 <- nnet(Quality ~ . , data = wine, subset = samp, size = 4, rang = r, decay = 5e-4, maxit = 200)
##读入数据
wine <- read.table("winequality.txt", header = FALSE, sep = ";")
names(wine) <- c("FixedAcidity", "VolatileAcidity", "CitricAcid", "ResidualSugar", "Chlorides", "FreeSulfurDioxide", "TotalSulfurDioxide", "Density", "PH", "Sulphates", "Alcohol", "Quality")
wine$Quality[which(wine$Quality == 3)] <- "bad"
wine$Quality[which(wine$Quality == 4)] <- "bad"
wine$Quality[which(wine$Quality == 5)] <- "bad"
wine$Quality[which(wine$Quality == 6)] <- "mid"
wine$Quality[which(wine$Quality == 7)] <- "good"
wine$Quality[which(wine$Quality == 8)] <- "good"
wine$Quality[which(wine$Quality == 9)] <- "good"
wine$Quality <- ordered(wine$Quality, levels = c("bad", "mid", "good"))
summary(wine)
##数据标准化
scale01 <- function(x){
ncol <- dim(x)[2]-1   #提取预处理样本集中特征向量的个数
nrow <- dim(x)[1]   #提取预处理样本集中样本总量
new <- matrix(0, nrow, ncol)
for(i in 1:ncol){
max <- max(x[, i])
min <- min(x[, i])
for(j in 1:nrow){
new[j, i] <- (x[j, i] - min)/(max-min)
}
}
new
}
##建立模型
set.seed(71)
samp <- sample(1:4898, 3000)   #从总样本集中抽取3000个样本作为训练集
wine[samp, 1:11] <- scale01(wine[samp, ])   #对样本进行预处理
r <- 1/max(abs(wine[samp, 1:11]))   #确定参数rang的变化范围
set.seed(101)
library(nnet)
model1 <- nnet(Quality ~ . , data = wine, subset = samp, size = 4, rang = r, decay = 5e-4, maxit = 200)
set.seed(101)
summary(model1)
##预测
x <- wine[, 1:11]
pred <- predict(model1, x, type = "class")
pred[sample(1:4898, 3)]   #挑选3个进行展示
pred
x <- subset(wine, select = -Quality)
y <- wine[, 12]
y
y <- class.ind(y)
y
set.seed(101)
model2 <- nnet(x, y, decay = 5e-4, maxit = 200, size = 4, rang = r)
summary(model2)
data(infert, package = "datasets")
str(infert)
setwd("~/Documents/nutstore/R-work/learn/package/aboutANN")
data(infert, package = "datasets")
str(infert)
View(infert)
library(neuralnet)
infert$education <- as.numeric(infert$education)
formula <- case ~ age + parity + induced + spontaneous
train_nrow <- sample(nrow(infert), 200)
trainData <- infert[train_nrow, ]
testData <- infert[-train_nrow, ]
net.infert <- neuralnet(formula = formula, data = trainData, hidden = 4, algorithm = "backprop", linear.output = FALSE, likelihood = TRUE, learningrate = 0.03)
plot(net.infert)
pre <- compute(net.infert, testData[ , c("age", "parity", "induced", "spontaneous")], rep = 1)
pre
data.frame(true = testData[ , c("case")], pre = pre$net.result[ , 1])
pre
fore <- predict(net.infert, testData[ , c("age", "parity", "induced", "spontaneous")])
head(pre)
pre$net.result
pre.result <- pre$net.result
View(pre.result)
View(testData)
View(testData)
View(testData)
formula <- education ~ age + parity + induced + spontaneous
train_nrow <- sample(nrow(infert), 200)
trainData <- infert[train_nrow, ]
testData <- infert[-train_nrow, ]
net.infert <- neuralnet(formula = formula, data = trainData, hidden = 4, algorithm = "backprop", linear.output = FALSE, likelihood = TRUE, learningrate = 0.03)
plot(net.infert)
pre <- compute(net.infert, testData[ , c("age", "parity", "induced", "spontaneous")], rep = 1)
pre.result <- pre$net.result
View(pre.result)
View(testData)
