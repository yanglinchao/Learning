setwd("C:/Users/ylc/nutstore/code/R-work")
install.packages("patchwork")
library(ggplot2)
library(patchwork)
install.packages("patchwork")
install.packages("devtools")
devtolls:install_github("thomasp85/patchwork")
devtools:install_github("thomasp85/patchwork")
install.packages("devtools")
a <- matrix(1:8, ncol = 4)
row.names(a) <- c(2, 3)
a
# 加权距离函数，欧式距离
MyWeightedDist <- function(data, weight = 1){
# data为计算样本间距离的数据，行为样本，列为变量
# weight为根据变量重要程度设置的权重，默认权重相等
n_col <- ncol(data)   # 变量数
n_row <- nrow(data)   # 样本数
if(weight == 1){
weight <- rep(1, n_col)
}else{
weight <- weight
}
# 生成矩阵储存结果
# matrix_dist矩阵列名为1到(n_row-1)变量，行名为2到n_row变量
matrix_dist <- matrix(NA, nrow = (n_row-1), ncol = (n_row-1))
row.names(matrix_dist) <- c(2:n_row)
names(matrix_dist) <- c(1:(n_row-1))
# 从第1个样本开始循环，分别和第2、第3……个样本计算距离
for(i in 1:(n_row-1)){
for(j in (i+1):(n_row)){
xi <- data[i, ]
xj <- data[j, ]
dist <- sqrt(sum(weight*((xi-xj)^2)))
matrix_dist[j-1, i] <- dist
}
}
return(matrix_dist)
}
View(MyWeightedDist)
a
a <- matrix(1:50, ncol = 10)
MyWeightedDist(a, weight = c(0.1, 0.2, 0.3, 0.2, 0.2))
colnames(a) <- c(1:5)
names(a) <- c(1:5)
View(a)
a <- matrix(1:50, ncol = 5)
View(a)
names(a) <- c(1:5)
a
# 加权距离函数，欧式距离
MyWeightedDist <- function(data, weight = rep(1, ncol(data))){
# data为计算样本间距离的数据，行为样本，列为变量
# weight为根据变量重要程度设置的权重，默认权重相等
n_col <- ncol(data)   # 变量数
n_row <- nrow(data)   # 样本数
# 生成矩阵储存结果
# matrix_dist矩阵，列为1到(n_row-1)变量，行为2到n_row变量
matrix_dist <- matrix(NA, nrow = (n_row-1), ncol = (n_row-1))
# 从第1个样本开始循环，分别和第2、第3……个样本计算距离
for(i in 1:(n_row-1)){
for(j in (i+1):(n_row)){
xi <- data[i, ]
xj <- data[j, ]
dist <- sqrt(sum(weight*((xi-xj)^2)))
matrix_dist[j-1, i] <- dist
}
}
result <- data.frame(matrix_dist)
names(result) <- c(1:(n_row-1))
rownames(result) <- c(2:(n_row))
return(matrix_dist)
}
a <- matrix(1:50, ncol = 5)
MyWeightedDist(a, weight = c(0.1, 0.2, 0.3, 0.2, 0.2))
# 加权距离函数，欧式距离
MyWeightedDist <- function(data, weight = rep(1, ncol(data))){
# data为计算样本间距离的数据，行为样本，列为变量
# weight为根据变量重要程度设置的权重，默认权重相等
n_col <- ncol(data)   # 变量数
n_row <- nrow(data)   # 样本数
# 生成矩阵储存结果
# matrix_dist矩阵，列为1到(n_row-1)变量，行为2到n_row变量
matrix_dist <- matrix(NA, nrow = (n_row-1), ncol = (n_row-1))
# 从第1个样本开始循环，分别和第2、第3……个样本计算距离
for(i in 1:(n_row-1)){
for(j in (i+1):(n_row)){
xi <- data[i, ]
xj <- data[j, ]
dist <- sqrt(sum(weight*((xi-xj)^2)))
matrix_dist[j-1, i] <- dist
}
}
result <- data.frame(matrix_dist)
names(result) <- c(1:(n_row-1))
rownames(result) <- c(2:(n_row))
return(result)
}
a <- matrix(1:50, ncol = 5)
MyWeightedDist(a, weight = c(0.1, 0.2, 0.3, 0.2, 0.2))
a <- matrix(sample(1:50, 50), ncol = 5)
MyWeightedDist(a, weight = c(0.1, 0.2, 0.3, 0.2, 0.2))
MyWeightedDist(a)
dist(a)
str(dist(a))
setwd("C:/Users/ylc/nutstore/code/R-work/learn/packages/Plot")
install.packages(ggpubr)
library(ggpubr)
data("ToothGrowth")
head(ToothGrowth)
# step2:添加p-value,默认是Wilcoxon text
p + stat_compare_means()
library(ggpubr)
data("ToothGrowth")
head(ToothGrowth)
# 比较独立的两组,绘制箱线图并添加p-value
# step1:绘制箱线图
p <- ggboxplot(ToothGrowth, x = "supp", y = "len", color = "supp", palette = "jco", add = "jitter")
# step2:添加p-value,默认是Wilcoxon text
p + stat_compare_means()
# step2:使用t-test
p + stat_compare_means(method = "t.test")
# 配对样本比较
compare_means(len~supp, data = ToothGrowth, paired = TRUE)
# 配对样本比较
ggpaired(ToothGrowth, x = "supp", y = "len", color = "supp", line.color = "grey", line.size = 0.4, palette = "jco") + compare_means(paired = TRUE)
# 配对样本比较,利用ggpaired()进行可视化
ggpaired(data = ToothGrowth, x = "supp", y = "len", color = "supp", line.color = "grey", line.size = 0.4, palette = "jco") + compare_means(paired = TRUE)
# 配对样本比较,利用ggpaired()进行可视化
ggpaired(ToothGrowth, x = "supp", y = "len", color = "supp", line.color = "grey", line.size = 0.4, palette = "jco")
# 配对样本比较,利用ggpaired()进行可视化,并通过stat_compare_means()添加p-value
ggpaired(ToothGrowth, x = "supp", y = "len", color = "supp", line.color = "grey", line.size = 0.4, palette = "jco") + stat_compare_means(data = ToothGrowth, paired = TRUE)
# 多组比较
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means()
# 多组比较,并通过stat_compare_means()添加p-value
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means()
# 多组比较,使用anova
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means(method = "anova")
# 配对样本比较,利用ggpaired()进行可视化,并通过stat_compare_means()添加p-value
ggpaired(ToothGrowth, x = "supp", y = "len", color = "supp", line.color = "grey", line.size = 0.4) + stat_compare_means(data = ToothGrowth, paired = TRUE)
# 配对样本比较,利用ggpaired()进行可视化,并通过stat_compare_means()添加p-value
ggpaired(ToothGrowth, x = "supp", y = "len", color = "supp", line.color = "grey", line.size = 0.4, palette = "jco") + stat_compare_means(data = ToothGrowth, paired = TRUE)
# 成对比较,如果分组变量中包含两个以上水平,会自动进行两两比较
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means()
# 成对比较,如果分组变量中包含两个以上水平,会自动进行两两比较
# 第一个stat_compare_means()指定添加那些组的比较,第二个stat_compare_stat()指定添加全局的比较
my_comparision <- list(c("0.5", "1"), c("1", "2"), c("0.5", "2"))
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means(comparisons = my_comparision) + stat_compare_means()
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means(comparisons = my_comparision) + stat_compare_means(label.y = 50)
# 成对比较,如果分组变量中包含两个以上水平,会自动进行两两比较
# 第一个stat_compare_means()指定添加那些组的比较,第二个stat_compare_stat()指定添加全局的比较
my_comparision <- list(c("0.5", "1"), c("1", "2"), c("0.5", "2"))
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means(comparisons = my_comparision) + stat_compare_means(label.y = 50)
# 通过ref.group参数设置参考组
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means(label = "p.signif", method = "t.test", ref.group = "0.5") + stat_compare_means(method = "anova", label.y = 40)
# 当组别太多时,如果在组间进行比较,那么两两组合比较的组会过多,这时可以把ref.group参数设置成".all”,将每组均值都与整体的均值进行比较
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means(label = "p.signif", method = "t.test", ref.group = ".all") + stat_compare_means(method = "anova", label.y = 40)
# 当组别太多时,如果在组间进行比较,那么两两组合比较的组会过多,这时可以把ref.group参数设置成".all.”,将每组均值都与整体的均值进行比较
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means(label = "p.signif", method = "t.test", ref.group = ".all.") + stat_compare_means(method = "anova", label.y = 40)
# 通过设置hide.ns=TRUE将不显著的去掉
ggboxplot(ToothGrowth, x = "dose", y = "len", color = "dose", palette = "jco") + stat_compare_means(label = "p.signif", method = "t.test", ref.group = ".all.", hide.ns = TRUE) + stat_compare_means(method = "anova", label.y = 40)
