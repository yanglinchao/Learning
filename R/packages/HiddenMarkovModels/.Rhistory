library(PerformanceAnalytics)
library(HMM)
library(zoo)
getSymbols(symbol, env = symbolData, src = "yahoo", from = startDate, to = endDate)
mktdata <- eval(parse(text = paste("symbolData$", sub("^", "", symbol, fixed = TRUE))))
inSampleMkeData <- window(mktdata, start = startDate, end = trainingEndDate)
library(quantmod)
library(PerformanceAnalytics)
#library(RHmm)
library(HMM)
library(zoo)
startDate <- as.Date("2000-01-01")
endDate <- as.Date("2015-01-01")
trainingEndDate = as.Date("2010-01-01")
NDayLookforwardLowHigh <- 10
HmmLikelihoodTestLength <- 5
symbol <- c("^GSPC")
symbolData <- new.env()
getSymbols(symbol, env = symbolData, src = "yahoo", from = startDate, to = endDate)
mktdata <- eval(parse(text = paste("symbolData$", sub("^", "", symbol, fixed = TRUE))))
inSampleMkeData <- window(mktdata, start = startDate, end = trainingEndDate)
outOfSampleMktData <- window(mktdata, start)
?eval
parse(text = paste("symbolData$", sub("^", "", symbol, fixed = TRUE)))
?parse
paste("symbolData$", sub("^", "", symbol, fixed = TRUE)))
paste("symbolData$", sub("^", "", symbol, fixed = TRUE))
paste("^", "^")
mktdata <- eval(parse(text = paste("symbolData$", sub("^", "", symbol, fixed = TRUE), sep = "")))
paste("symbolData$", sub("^", "", symbol, fixed = TRUE), sep = ""))
paste("symbolData$", sub("^", "", symbol, fixed = TRUE), sep = "")
inSampleMkeData <- window(mktdata, start = startDate, end = trainingEndDate)
outOfSampleMktData <- window(mktdata, start)
outOfSampleMktData <- window(mktdata, start = trainingEndDate + 1)
dailyRet[is.na(dailyRet)] <- 0.00001
dailyRet <- ROC(Cl(mktdata))   #Daily Returns
dailyRet[is.na(dailyRet)] <- 0.00001
inSampleDailyRet <- window(dailyRet, start = startDate, end = trainingEndDate)
outOfSampleDailyRet <- window(dailyRet, start = trainingEndDate + 1)
CoverTofullSignal <- function(signal){
results <- rep(0, length(signal))
intrade <- F
for(i in seq(q, length(signal))){
if(signal[i] == -1){
intrade <- F
}
if(signal[i] == 1 || intrade){
results[i] <- 1
intrade <- T
}
}
return(results)
}
LongTrendSignal <- rep(0, nrow(inSampleMkeData))
for(i in seq(1, nrow(inSampleMkeData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMkeData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMkeData[i, ])) == min(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
if(coredata(Cl(inSmapleMktData[i, ])) == max(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
}
LongTrendSignal <- CoverTofullSignal(LongTrendSignal)
inSampleMktData <- inSampleMkeData
rm(inSampleMkeData)
#Generate long trend signal
LongTrendSignal <- rep(0, nrow(inSampleMkeData))
for(i in seq(1, nrow(inSampleMkeData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMkeData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMkeData[i, ])) == min(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
if(coredata(Cl(inSmapleMktData[i, ])) == max(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
}
LongTrendSignal <- CoverTofullSignal(LongTrendSignal)
#Generate long trend signal
LongTrendSignal <- rep(0, nrow(inSampleMktData))
for(i in seq(1, nrow(inSampleMktData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMktData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMktData[i, ])) == min(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
if(coredata(Cl(inSmapleMktData[i, ])) == max(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
}
LongTrendSignal <- CoverTofullSignal(LongTrendSignal)
#Generate long trend signal
LongTrendSignal <- rep(0, nrow(inSampleMktData))
for(i in seq(1, nrow(inSampleMktData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMktData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMktData[i, ])) == min(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
if(coredata(Cl(inSampleMktData[i, ])) == max(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
}
LongTrendSignal <- CoverTofullSignal(LongTrendSignal)
CoverTofullSignal <- function(signal){
results <- rep(0, length(signal))
intrade <- F
for(i in seq(1, length(signal))){
if(signal[i] == -1){
intrade <- F
}
if(signal[i] == 1 || intrade){
results[i] <- 1
intrade <- T
}
}
return(results)
}
#Generate long trend signal
LongTrendSignal <- rep(0, nrow(inSampleMktData))
for(i in seq(1, nrow(inSampleMktData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMktData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMktData[i, ])) == min(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
if(coredata(Cl(inSampleMktData[i, ])) == max(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
}
LongTrendSignal <- CoverTofullSignal(LongTrendSignal)
#Generate short trend signal
ShortTrendSignal <- rep(0, nrow(inSampleMktData))
for(i in seq(1, nrow(inSampleMktData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMktData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMktData[i, ])) == max(coredata(dataBlock))){
ShortTrendSignal[i] <- 1
}
if(coredata(Cl(inSampleMktData[i, ])) == min(coredata(dataBlock))){
ShortTrendSignal[i] <- -1
}
}
ShortTrendSignal <- CoverTofullSignal(ShortTrendSignal)
CreateListOfMatrixFeatures <- function(features, signal){
results <- list()
extract <- F
for(i in seq(1, length(signal))){
if(signal[i] == 1 && !extract){
startIndex <- i
extract <- T
}
if(signal[i] == 0 && extract){
endIndex <- i-1
dataBlock <- features[startIndex:endIndex, ]
extract <- F
#print(dataBlock)
results[[length(results) + 1]] <- as.matrix(dataBlock)
}
}
return(results)
}
features <- cbind(dailyRet, Hi(mktdata)/Lo(mktdata),
Hi(mktdata)/Op(mktdata), Hi(mktdata)/Cl(mktdata),
Op(mktdata)/Cl(mktdata), Lo(mktdata)/Cl(mktdata),
Lo(mktdata)/Op(mktdata))
inSampleLongFeaturesList <- CreateListOfMatrixFeatures(inSampleTrainingFeatures, LongTrendSignal)
inSampleLongFeaturesList <- CreateListOfMatrixFeatures(inSampleTrainingFeatures, ShortTrendSignal)
#Generate features
features <- cbind(dailyRet, Hi(mktdata)/Lo(mktdata),
Hi(mktdata)/Op(mktdata), Hi(mktdata)/Cl(mktdata),
Op(mktdata)/Cl(mktdata), Lo(mktdata)/Cl(mktdata),
Lo(mktdata)/Op(mktdata))
inSampleTrainingFeatures <- window(features, start = startDate, end = trainingEndDate)
outOfSampleFeatures <- window(features, start = trainingEndDate + 1)
#long / short features
inSampleLongFeaturesList <- CreateListOfMatrixFeatures(inSampleTrainingFeatures, LongTrendSignal)
inSampleLongFeaturesList <- CreateListOfMatrixFeatures(inSampleTrainingFeatures, ShortTrendSignal)
View(inSampleDailyRet)
View(inSampleTrainingFeatures)
View(inSampleTrainingFeatures)
inSampleLongFeaturesList
summary(inSampleLongFeaturesList)
str(inSampleLongFeaturesList)
names(inSampleLongFeaturesList) <- c(1:length(inSampleLongFeaturesList))
inSampleLongFeaturesList$`1`
inSampleLongFeaturesList$`2`
library(depmixS4)
library(TTR)
library(ggplot2)
library(reshape2)
library(plotly)
library(quantmod)
library(dplyr)
shadata <- getSymbols("000001.ss", from = "2004-01-01", auto.assign = FALSE)
gspcRets <- diff(log(Cl(shadata)))
View(gspcRets)
View(shadata)
?Cl
View(gspcRets)
Cl(shadata)
head(Cl(shadata))
View(shadata)
returns <- as.numeric(gspcRets)
shdata <- na.omit(shdata)
shdata <- getSymbols("000001.ss", from = "2004-01-01", auto.assign = FALSE)
gspcRets <- diff(log(Cl(shdata)))
returns <- as.numeric(gspcRets)
shdata <- na.omit(shdata)
df <- data.frame(Date = index(shdata), coredata(shdata))
View(df)
View(shdata)
p <- df %>%
plot_ly(x = ~ Date, type = "candlestick",
open = ~ X000001.SS.Open, close = ~ X000001.SS.Close,
high = ~ X000001.SS.High, low = ~ X000001.SS.Low, name = "000001.SS",
increasing = i, decreasing = d) %>%
add_lines(y = ~ up, names = "B Band",
line = list(color = "#ccc", width = 0.5),
legendgroup = "Bollinger Bands",
hoverinfo = "none") %>%
add_lines(y = ~ dn, name = "B Bands",
line = list(color = "#ccc", width = 0.5),
legendgroup = "Bollinger Bands",
showlegend = FALSE, hoverinfo = "none") %>%
add_lines(y = ~ mavg, name = "Mv Avg",
line = list(color = "#E377C2", width = 0.5),
hoverinfo = "none") %>%
layout(yaxis = list(title = "Price"))
p <- df %>%
plot_ly(x = ~ Date, type = "candlestick",
open = ~ X000001.SS.Open, close = ~ X000001.SS.Close,
high = ~ X000001.SS.High, low = ~ X000001.SS.Low, name = "000001.SS",
increasing = "i", decreasing = "d") %>%
add_lines(y = ~ up, names = "B Band",
line = list(color = "#ccc", width = 0.5),
legendgroup = "Bollinger Bands",
hoverinfo = "none") %>%
add_lines(y = ~ dn, name = "B Bands",
line = list(color = "#ccc", width = 0.5),
legendgroup = "Bollinger Bands",
showlegend = FALSE, hoverinfo = "none") %>%
add_lines(y = ~ mavg, name = "Mv Avg",
line = list(color = "#E377C2", width = 0.5),
hoverinfo = "none") %>%
layout(yaxis = list(title = "Price"))
p
View(df)
library(quantmod)
library(PerformanceAnalytics)
#library(RHmm)
library(HMM)
library(zoo)
startDate <- as.Date("2000-01-01")
endDate <- as.Date("2015-01-01")
trainingEndDate = as.Date("2010-01-01")
NDayLookforwardLowHigh <- 10
HmmLikelihoodTestLength <- 5
symbol <- c("^GSPC")
symbolData <- new.env()
getSymbols(symbol, env = symbolData, src = "yahoo", from = startDate, to = endDate)
mktdata <- eval(parse(text = paste("symbolData$", sub("^", "", symbol, fixed = TRUE), sep = "")))
inSampleMktData <- window(mktdata, start = startDate, end = trainingEndDate)
outOfSampleMktData <- window(mktdata, start = trainingEndDate + 1)
dailyRet <- ROC(Cl(mktdata))   #Daily Returns
dailyRet[is.na(dailyRet)] <- 0.00001
inSampleDailyRet <- window(dailyRet, start = startDate, end = trainingEndDate)
outOfSampleDailyRet <- window(dailyRet, start = trainingEndDate + 1)
CoverTofullSignal <- function(signal){
results <- rep(0, length(signal))
intrade <- F
for(i in seq(1, length(signal))){
if(signal[i] == -1){
intrade <- F
}
if(signal[i] == 1 || intrade){
results[i] <- 1
intrade <- T
}
}
return(results)
}
#Generate long trend signal
LongTrendSignal <- rep(0, nrow(inSampleMktData))
for(i in seq(1, nrow(inSampleMktData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMktData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMktData[i, ])) == min(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
if(coredata(Cl(inSampleMktData[i, ])) == max(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
}
LongTrendSignal <- CoverTofullSignal(LongTrendSignal)
#Generate short trend signal
ShortTrendSignal <- rep(0, nrow(inSampleMktData))
for(i in seq(1, nrow(inSampleMktData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMktData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMktData[i, ])) == max(coredata(dataBlock))){
ShortTrendSignal[i] <- 1
}
if(coredata(Cl(inSampleMktData[i, ])) == min(coredata(dataBlock))){
ShortTrendSignal[i] <- -1
}
}
ShortTrendSignal <- CoverTofullSignal(ShortTrendSignal)
#Extracts a list of varying length features
CreateListOfMatrixFeatures <- function(features, signal){
results <- list()
extract <- F
for(i in seq(1, length(signal))){
if(signal[i] == 1 && !extract){
startIndex <- i
extract <- T
}
if(signal[i] == 0 && extract){
endIndex <- i-1
dataBlock <- features[startIndex:endIndex, ]
extract <- F
#print(dataBlock)
results[[length(results) + 1]] <- as.matrix(dataBlock)
}
}
return(results)
}
#Generate features
features <- cbind(dailyRet, Hi(mktdata)/Lo(mktdata),
Hi(mktdata)/Op(mktdata), Hi(mktdata)/Cl(mktdata),
Op(mktdata)/Cl(mktdata), Lo(mktdata)/Cl(mktdata),
Lo(mktdata)/Op(mktdata))
inSampleTrainingFeatures <- window(features, start = startDate, end = trainingEndDate)
outOfSampleFeatures <- window(features, start = trainingEndDate + 1)
#long / short features
inSampleLongFeaturesList <- CreateListOfMatrixFeatures(inSampleTrainingFeatures, LongTrendSignal)
inSampleLongFeaturesList <- CreateListOfMatrixFeatures(inSampleTrainingFeatures, ShortTrendSignal)
library(quantmod)
library(PerformanceAnalytics)
#library(RHmm)
library(HMM)
library(zoo)
startDate <- as.Date("2000-01-01")
endDate <- as.Date("2015-01-01")
trainingEndDate = as.Date("2010-01-01")
NDayLookforwardLowHigh <- 10
HmmLikelihoodTestLength <- 5
symbol <- c("^GSPC")
symbolData <- new.env()
getSymbols(symbol, env = symbolData, src = "yahoo", from = startDate, to = endDate)
mktdata <- eval(parse(text = paste("symbolData$", sub("^", "", symbol, fixed = TRUE), sep = "")))
inSampleMktData <- window(mktdata, start = startDate, end = trainingEndDate)
outOfSampleMktData <- window(mktdata, start = trainingEndDate + 1)
dailyRet <- ROC(Cl(mktdata))   #Daily Returns
dailyRet[is.na(dailyRet)] <- 0.00001
inSampleDailyRet <- window(dailyRet, start = startDate, end = trainingEndDate)
outOfSampleDailyRet <- window(dailyRet, start = trainingEndDate + 1)
library(quantmod)
library(PerformanceAnalytics)
#library(RHmm)
library(HMM)
library(zoo)
startDate <- as.Date("2000-01-01")
endDate <- as.Date("2015-01-01")
trainingEndDate = as.Date("2010-01-01")
NDayLookforwardLowHigh <- 10
HmmLikelihoodTestLength <- 5
symbol <- c("^GSPC")
symbolData <- new.env()
getSymbols(symbol, env = symbolData, src = "yahoo", from = startDate, to = endDate)
mktdata <- eval(parse(text = paste("symbolData$", sub("^", "", symbol, fixed = TRUE), sep = "")))
inSampleMktData <- window(mktdata, start = startDate, end = trainingEndDate)
library(quantmod)
library(PerformanceAnalytics)
#library(RHmm)
library(HMM)
library(zoo)
startDate <- as.Date("2000-01-01")
endDate <- as.Date("2015-01-01")
trainingEndDate = as.Date("2010-01-01")
NDayLookforwardLowHigh <- 10
HmmLikelihoodTestLength <- 5
symbol <- c("^GSPC")
symbolData <- new.env()
getSymbols(symbol, env = symbolData, src = "yahoo", from = startDate, to = endDate)
mktdata <- eval(parse(text = paste("symbolData$", sub("^", "", symbol, fixed = TRUE), sep = "")))
inSampleMktData <- window(mktdata, start = startDate, end = trainingEndDate)
outOfSampleMktData <- window(mktdata, start = trainingEndDate + 1)
dailyRet <- ROC(Cl(mktdata))   #Daily Returns
dailyRet[is.na(dailyRet)] <- 0.00001
inSampleDailyRet <- window(dailyRet, start = startDate, end = trainingEndDate)
outOfSampleDailyRet <- window(dailyRet, start = trainingEndDate + 1)
CoverTofullSignal <- function(signal){
results <- rep(0, length(signal))
intrade <- F
for(i in seq(1, length(signal))){
if(signal[i] == -1){
intrade <- F
}
if(signal[i] == 1 || intrade){
results[i] <- 1
intrade <- T
}
}
return(results)
}
#Generate long trend signal
LongTrendSignal <- rep(0, nrow(inSampleMktData))
for(i in seq(1, nrow(inSampleMktData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMktData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMktData[i, ])) == min(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
if(coredata(Cl(inSampleMktData[i, ])) == max(coredata(dataBlock))){
LongTrendSignal[i] <- 1
}
}
LongTrendSignal <- CoverTofullSignal(LongTrendSignal)
#Generate short trend signal
ShortTrendSignal <- rep(0, nrow(inSampleMktData))
for(i in seq(1, nrow(inSampleMktData) - NDayLookforwardLowHigh)){
dataBlock <- Cl(inSampleMktData[seq(i, i+NDayLookforwardLowHigh), ])
if(coredata(Cl(inSampleMktData[i, ])) == max(coredata(dataBlock))){
ShortTrendSignal[i] <- 1
}
if(coredata(Cl(inSampleMktData[i, ])) == min(coredata(dataBlock))){
ShortTrendSignal[i] <- -1
}
}
ShortTrendSignal <- CoverTofullSignal(ShortTrendSignal)
#Extracts a list of varying length features
CreateListOfMatrixFeatures <- function(features, signal){
results <- list()
extract <- F
for(i in seq(1, length(signal))){
if(signal[i] == 1 && !extract){
startIndex <- i
extract <- T
}
if(signal[i] == 0 && extract){
endIndex <- i-1
dataBlock <- features[startIndex:endIndex, ]
extract <- F
#print(dataBlock)
results[[length(results) + 1]] <- as.matrix(dataBlock)
}
}
return(results)
}
#Generate features
features <- cbind(dailyRet, Hi(mktdata)/Lo(mktdata),
Hi(mktdata)/Op(mktdata), Hi(mktdata)/Cl(mktdata),
Op(mktdata)/Cl(mktdata), Lo(mktdata)/Cl(mktdata),
Lo(mktdata)/Op(mktdata))
inSampleTrainingFeatures <- window(features, start = startDate, end = trainingEndDate)
outOfSampleFeatures <- window(features, start = trainingEndDate + 1)
#long / short features
inSampleLongFeaturesList <- CreateListOfMatrixFeatures(inSampleTrainingFeatures, LongTrendSignal)
inSampleLongFeaturesList <- CreateListOfMatrixFeatures(inSampleTrainingFeatures, ShortTrendSignal)
library(depmixS4)
data(speed)
View(speed)
set.seed(1)
mod <- depmix(response = rt ~ 1, data = speed, nstates = 2, trstart = runif(4))
runif(4)
View(speed)
mod <- depmix(response = rt + pacc ~ 2, data = speed, nstates = 2, trstart = runif(4))
View(speed)
fm <- fit(mod, emc = em.control(rand = FALSE))
fm
summary(fm)
mod <- depmix(response = list(rt ~ 1, corr ~ 1), data = speed, nstates = 2, trstart = runif(4))
mod <- depmix(response = list(rt ~ 1, corr ~ 1), data = speed, nstates = 2, family = list(gaussian(), multinomial("identity")), ntimes = c(168, 134, 137))
mod
View(speed)
set.seed(1)
fm <- fit(mod)
install.packages("HiddenMarkov")
setwd("C:/Users/ylc/nutstore/R-work/learn/packages/HiddenMarkovModels")
state.names <- c("one", "two")
transition <- c(0.035, 0.01)
location <- c(1, 2)
scale <- c(1, 1)
df <- c(4, 6)
hmm1 <- getHMM(list(a = transition, mu = location, sigma = scale, nu = df), state.names)
for(i in 1:50) obs.list[[i]] <- sampleSeq(hmm1, 100)
library(tileHMM)
state.names <- c("one", "two")
transition <- c(0.035, 0.01)
location <- c(1, 2)
scale <- c(1, 1)
df <- c(4, 6)
hmm1 <- getHMM(list(a = transition, mu = location, sigma = scale, nu = df), state.names)
obs.list <- list()
for(i in 1:50) obs.list[[i]] <- sampleSeq(hmm1, 100)
hmm2 <- hmm.setup(obs.list, state = c("one", "two", df = 5))
hmm2 <- hmm.setup(obs.list, state = c("one", "two"), df = 5)
hmm2.fit <- baumWelch(hmm2, obs.list, max.iter = 20, df = 5, verbose = 1)
vect <- sample(x = seq(0:1, 0.001), 100, replace = FALSE)
vect <- sample(x = seq(from = 0, to = 1, 1000), 100, replace = FALSE)
seq(from = 0, to = 1, 1000)
seq(from = 0, to = 1, 0.001)
vect <- sample(x = seq(from = 0, to = 1, by = 0.001), 100, replace = FALSE)
fwd <- forward(hmm2.fit, vect)
fwd$logProb
fwd2 <- forward(hmm2.fit, obs.list[[1]])
fwd2$logProb
fwd2 <- forward(hmm2.fit, obs.list)
fwd2 <- forward(hmm2.fit, obs.list[[5]])
fwd2$logProb
hmm2.fit
fwd2$alpha.scaled
r <- fwd2$logProb
r
exp(1)^r
install.packages("seqHMM")
exp(1)^-10
exp(1)^-20
