setwd("C:/Users/ylc/nutstore/code/R-work")
install.packages("patchwork")
library(ggplot2)
library(patchwork)
install.packages("patchwork")
install.packages("devtools")
devtolls:install_github("thomasp85/patchwork")
devtools:install_github("thomasp85/patchwork")
install.packages("devtools")
setwd("C:/Users/ylc/nutstore/code/R-work/learn/packages/Clusters")
for (i in 1:1) {
a <- i
}
print(a)
# 聚类的有效性指标
# 外部指标ExternalIndex()包括JC/FMI/RI
ExternalIndex <- function(x, y){
# 聚类性能的外部度量指标JC/FMI/RI
# 需要有聚类结果和参考结果
# x和y分别为聚类结果和参考结果
# x和y的长度应当相等
# 将样本两两配对，根据其聚类结果是否相同和参考结果是否相同交叉分为4类
# 若样本对聚类结果相同，参考结果相同，为A类，总数记为a
# 若样本对聚类结果相同，参考结果不同，为B类，总数记为b
# 若样本对聚类结果不同，参考结果相同，为C类，总数记为c
# 若样本对聚类结果不同，参考结果不同，为D类，总数记为d
m <- length(x)
#生成a/b/c/d
a <- 0; b <- 0; c <- 0; d <- 0
for(i in 1:(m-1)){
for(j in (i+1):m)
if(x[i] == x[j]){
if(y[i] == y[j]){
a <- a+1
}else{
b <- b+1
}
}else{
if(y[i] == y[j]){
c <- c+1
}else{
d <- d+1
}
}
}
# JC:Jaccard Coefficient
JC <- a/(a+b+c)
# FMI:Fowlkes and Mallows Index
FMI <- sqrt((a/(a+b))*(a/(a+c)))
#RI:Rand Index
RI <- (2*(a+d))/(m*(m-1))
result <- list(JC=JC, FMI=FMI, RI=RI)
return(result)
}
x <- sample(c(1, 2, 3), size = 50, replace = TRUE)
y <- sample(c(1, 2, 3), size = 50, replace = TRUE)
result <- ExternalIndex(x, y)
result$JC
result$FMI
result$RI
x <- rep(1, 50)
y <- c(rep(1, 40), rep(2, 10))
result <- ExternalIndex(x, y)
result$JC
result$FMI
result$RI
?dist
dist(x, y, p = 1)
a <- matrix(rnorm(100), nrow=5)
dist(x)
dist(x, diag = TRUE)
a <- matrix(x, nrow=5)
dist(x, diag = TRUE)
dist(a, diag = TRUE)
View(a)
a <- matrix(y, nrow=5)
dist(a, diag = TRUE)
dist(a)
a <- matrix(rnorm(100), nrow=5)
dist(a)
a <- matrix(rnorm(25), nrow=5)
dist(a)
View(a)
a <- matrix(rnorm(50), nrow=5)
dist(a)
a <- matrix(rnorm(50), nrow=10)
dist(a)
View(result)
View(a)
result <- rep(NA, n)
result <- rep(NA, 5)
# 簇内样本间的平均距离
AvgC <- function(data, clusters, disMethod = "euclidean"){
# 簇内样本间的平均距离
# data为参与聚类的数据(数据框或矩阵)，clusters为聚类的结果(向量)
# 簇的个数
cluster <- unique(clusters)
n <- length(cluster)
# 生成空向量储存各簇内样本间平均距离结果
result <- rep(NA, n)
# 对各簇内样本间平均距离进行计算
for(i in 1:n){
cdata <- data[which(clusters == cluster[i])]
result[i] <- dist(cdata, method = disMethod)
}
return(result)
}
View(a)
AvgC(a, c(1, 2, 3, 2, 1, 3, 1, 2, 2, 1))
AvgC <- function(data, clusters, disMethod = "euclidean"){
# 簇内样本间的平均距离
# data为参与聚类的数据(数据框或矩阵)，clusters为聚类的结果(向量)
# 簇的个数
cluster <- unique(clusters)
n <- length(cluster)
# 生成空向量储存各簇内样本间平均距离结果
result <- rep(NA, n)
# 对各簇内样本间平均距离进行计算
for(i in 1:n){
cdata <- data[which(clusters == cluster[i])]
result[i] <- mean(dist(cdata, method = disMethod))
}
return(result)
}
AvgC(a, c(1, 2, 3, 2, 1, 3, 1, 2, 2, 1))
AvgDist <- function(data, clusters, disMethod = "euclidean"){
# 簇内样本间的平均距离
# data为参与聚类的数据(数据框或矩阵)，clusters为聚类的结果(向量)
# 簇的个数
cluster <- unique(clusters)
n <- length(cluster)
# 生成空向量储存各簇内样本间平均距离结果
result <- rep(NA, n)
# 对各簇内样本间平均距离进行计算
for(i in 1:n){
cdata <- data[which(clusters == cluster[i])]
result[i] <- mean(dist(cdata, method = disMethod))
}
result <- data.frame(clusters = cluster, avgdist = result)
return(result)
}
AvgDist(a, c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1))
# 计算中心点函数(均值)
CenterMean <- function(data, clusters){
# 计算各簇中心点函数(均值)
# 一共有n个簇
cluster <- unique(clusters)
n <- length(cluster)
# 建立矩阵储存结果，行为类别，列为变量值
result <- matrix(ncol = ncol(data), nrow = n)
# 按簇分别计算中心点
data <- tbl_df(data)
for(i in 1:n){
cdata <- data[which(clusters == cluster[i]), ]
result[i, ] <- apply(cdata, MARGIN = 2, mean)
}
result <- cbind(clusters, result)
names(result) <- c("clusters", names(data))
return(result)
}
CenterMean(a, c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2))
CenterMean <- function(data, clusters){
# 计算各簇中心点函数(均值)
# 一共有n个簇
cluster <- unique(clusters)
n <- length(cluster)
# 建立矩阵储存结果，行为类别，列为变量值
result <- matrix(ncol = ncol(data), nrow = n)
# 按簇分别计算中心点
for(i in 1:n){
cdata <- data[which(clusters == cluster[i]), ]
result[i, ] <- apply(cdata, MARGIN = 2, mean)
}
result <- cbind(clusters, result)
names(result) <- c("clusters", names(data))
return(result)
}
CenterMean(a, c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2))
clusters = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2)
cluster <- unique(clusters)
n <- length(cluster)
data = a
# 建立矩阵储存结果，行为类别，列为变量值
result <- matrix(ncol = ncol(data), nrow = n)
View(result)
for(i in 1:n){
cdata <- data[which(clusters == cluster[i]), ]
result[i, ] <- apply(cdata, MARGIN = 2, mean)
}
clusters == cluster[1])
clusters == cluster[1]
which(clusters == cluster[1])
data[which(clusters == cluster[1]), ]
cdata <- data[which(clusters == cluster[1]), ]
apply(cdata, MARGIN = 2, mean)
result[i, ] <- apply(cdata, MARGIN = 2, mean)
View(result)
which(clusters == cluster[2])
CenterMean <- function(data, clusters){
# 计算各簇中心点函数(均值)
# 一共有n个簇
cluster <- unique(clusters)
n <- length(cluster)
# 建立矩阵储存结果，行为类别，列为变量值
result <- matrix(ncol = ncol(data), nrow = n)
# 按簇分别计算中心点
for(i in 1:n){
cdata <- data[which(clusters == cluster[2]), ]
result[i, ] <- apply(cdata, MARGIN = 2, mean)
}
result <- cbind(clusters, result)
names(result) <- c("clusters", names(data))
return(result)
}
CenterMean(data = a, clusters = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1))
CenterMean <- function(data, clusters){
# 计算各簇中心点函数(均值)
# 一共有n个簇
cluster <- unique(clusters)
n <- length(cluster)
# 建立矩阵储存结果，行为类别，列为变量值
result <- matrix(ncol = ncol(data), nrow = n)
# 按簇分别计算中心点
for(i in 1:n){
cdata <- data[which(clusters == cluster[i]), ]
result[i, ] <- apply(cdata, MARGIN = 2, mean)
}
result <- cbind(clusters, result)
names(result) <- c("clusters", names(data))
return(result)
}
CenterMean(data = a, clusters = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1))
CenterMean(data = data.frame(a), clusters = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1))
data.frame(a)
names(data)
data = data.frame(a)
names(data)
c("clusters", names(data))
计算中心点函数(均值)
CenterMean <- function(data, clusters){
# 计算各簇中心点函数(均值)
# 一共有n个簇
cluster <- unique(clusters)
n <- length(cluster)
# 建立矩阵储存结果，行为类别，列为变量值
result <- matrix(ncol = ncol(data), nrow = n)
# 按簇分别计算中心点
for(i in 1:n){
cdata <- data[which(clusters == cluster[i]), ]
result[i, ] <- apply(cdata, MARGIN = 2, mean)
}
result <- cbind(clusters, result)
names(result) <- c("clusters", names(data))
return(result)
}
CenterMean(data = data.frame(a), clusters = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1))
# 计算中心点函数(均值)
CenterMean <- function(data, clusters){
# 计算各簇中心点函数(均值)
# 一共有n个簇
cluster <- unique(clusters)
n <- length(cluster)
# 建立矩阵储存结果，行为类别，列为变量值
result <- matrix(ncol = ncol(data), nrow = n)
# 按簇分别计算中心点
for(i in 1:n){
cdata <- data[which(clusters == cluster[i]), ]
result[i, ] <- apply(cdata, MARGIN = 2, mean)
}
result <- cbind(cluster, result)
names(result) <- c("clusters", names(data))
return(result)
}
CenterMean(data = data.frame(a), clusters = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1))
r <- CenterMean(data = data.frame(a), clusters = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1))
View(r)
# 计算中心点函数(均值)
CenterMean <- function(data, clusters){
# 计算各簇中心点函数(均值)
# 一共有n个簇
cluster <- unique(clusters)
n <- length(cluster)
# 建立矩阵储存结果，行为类别，列为变量值
result <- matrix(ncol = ncol(data), nrow = n)
# 按簇分别计算中心点
for(i in 1:n){
cdata <- data[which(clusters == cluster[i]), ]
result[i, ] <- apply(cdata, MARGIN = 2, mean)
}
result <- data.frame(cbind(cluster, result))
names(result) <- c("clusters", names(data))
return(result)
}
r <- CenterMean(data = data.frame(a), clusters = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1))
View(r)
dist(a)
dist(a)[-1, ]
tail(dist(a))
b <- dist(a))
b <- dist(a)
b <- matrix(dist(a))
View(b)
View(a)
b <- tail(dist(a), k)
b <- tail(dist(a), 5)
