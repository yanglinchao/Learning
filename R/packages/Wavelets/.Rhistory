install.packages("pso")
library()
.libPaths()
.libPaths()
library()
install.packages("pso")
set.seed(1)
library(pso)
psoptim(rep(NA, 2), function(x){20+sum(x^2-10*cos(2*pi*x))}, lower = -5, upper = 5, control = list(abstol = 1e-8))
x = seq(from = -10, to = 10, 1000)
x
x <- seq(from = -10, to = 10, by = 0.01)
y <- 20+sum(x^2-10*cos(2*pi*x))
y
y <- 20 + x^2-10*cos(2*pi*x)
y
plot(x, y)
x <- 2
20+sum(x^2-10*cos(2*pi*x))
20+x^2-10*cos(2*pi*x)
x <- seq(from = -5, to = 5, by = 0.01)
y <- 20 + x^2-10*cos(2*pi*x)
y
plot(x, y)
psoptim(rep(NA, 2), function(x){20+sum(x^2-10*cos(2*pi*x))}, lower = -5, upper = 5, control = list(abstol = 1e-8))
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("xml2")
library(tidyverse)
load("D:/R/Demo_PC_HardLanding.RData")
Accuracy_PC; Precision_PC; Recall_PC
library(datasets)
data()
cars <- data(cars)
cars <- data("cars")
data("cars")
rm(cars``````)
rm(cars)
cars
warpbreaks
?warpbreaks
mydata <- data("warpbreaks")
data("warpbreaks")
data("warpbreaks")
data("iris")
library(datasets)
data("iris")
setwd("C:/Users/ylc/nutstore/R-work/learn/package/aboutWavelets")
install.packages("wavelets")
library(wavelets)
feature <- NULL
mydata <- read.table("http://archive.ics.usi.edu/ml/databases/synthetic_control/synthetic_control.data", header = FALSE, sep = "")
mydata <- read.table("https://archive.ics.uci.edu/ml/databases/synthetic_control/synthetic_control.data", header = FALSE, sep = "")
View(mydata)
data <- t(mydata[1, ])
View(data)
data.wt <- dwt(data, filter = "haar", boundary = "periodic")
data.wt
rm(data)
rm(data.wt)
for(i in 1:nrow(mydata)){
a <- t(mydata[i, ])
wt <- dwt(a, filter = "haar", boundary = "periodic")
feature <- rbind(feature, unlist(c(wt@W, wt@V[[wt@level]])))
}
feature <- as.data.frame(feature)
classld <- c(rep("1", 100), rep("2", 100), rep("3", 100), rep("4", 100), rep("5", 100), rep("6", 100))
wtSc <- data.frame(cbind(classld, feature))
View(wtSc)
install.packages("party")
library(party)
ct <- ctree(classld ~ ., data = wtSc, controls = ctree_control(minsplit = 30, minbucket = 10, maxdepth = 5))
pClassld <- predict(ct)
table(classld, pClassld)
(sum(classld == pClassld))/nrow(wtSc)
plot(ct, ip_args = list(pval = FALSE), ep_args = list(digits = 0))
wtp <- dwt(ap, filter = "haar", boundary = "periodic")
f <- NULL
ap <- t(mydata[1, ])
wtp <- dwt(ap, filter = "haar", boundary = "periodic")
f <- rbind(f, unlist(c(wtp@W, wtp@V[[wt@level]])))
f <- as.data.frame(f)
predict(ct, f)
