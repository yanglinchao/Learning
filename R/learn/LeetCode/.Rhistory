needle <- strsplit(needle, split = "")[[1]]
needle.contact <- paste(needle, collapse = "")
haystack.contact <- c()
for(i in 1:(length(haystack)-length(needle)+1)){
haystack.contact <- rbind(haystack.contact, paste(haystack[i:(i+length(needle)-1)], collapse = ""))
}
View(haystack.contact)
needle.contact
for(i in 1:length(haystack.contact)){
if(haystack.contact[i]==needle.contact){
print((i-1))
}else{
print(-1)
}
}
haystack.contact==needle.contact
strStr <- function(haystack, needle){
if(length(needle)==0){
print("0")
}else{
haystack <- strsplit(haystack, split = "")[[1]]
needle <- strsplit(needle, split = "")[[1]]
needle.contact <- paste(needle, collapse = "")
haystack.contact <- c()
for(i in 1:(length(haystack)-length(needle)+1)){
haystack.contact <- rbind(haystack.contact, paste(haystack[i:(i+length(needle)-1)], collapse = ""))
}
for(i in 1:length(haystack.contact)){
if(haystack.contact[i]==needle.contact){
print((i-1))
}
if(sum(haystack.contact==needle.contact)==0){
print(-1)
}
}
}
}
haystack = "hello"
needle = "ll"
strStr(haystack = haystack, needle = needle)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
}
}
}
nums = c(1, 3, 5, 6)
target = 5
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
}
nums = c(1, 3, 5, 6)
target = 5
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
}
nums = c(1, 3, 5, 6)
target = 4
searchInsert(nums = nums, target = target)
nums = c(1, 3, 5, 6)
target = 4
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
nums = c(1, 3, 5, 6)
target = 4
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + (right-left)/2
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
}
nums = c(1, 3, 5, 6)
target = 4
searchInsert(nums = nums, target = target)
nums = c(1, 3, 5, 6)
target = 4
n <- length(nums)
left <- 1
right <- n
middle <- left + (right-left)/2
nums[middle]
left <- 1
right <- n
nums = c(1, 3, 5, 6)
target = 4
left <- 1
right <- n
n <- length(nums)
right <- n
left <= right
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + (right-left)/2
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
print(middle+1)
}
}
nums = c(1, 3, 5, 6)
target = 4
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + (right-left)/2
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
print(trunc(middle)+1)
}
}
nums = c(1, 3, 5, 6)
target = 4
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + (right-left)/2
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
print(trunc(middle)+1)
}
nums = c(1, 3, 5, 6)
target = 4
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + (right-left)/2
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
print(trunc(middle))
}
nums = c(1, 3, 5, 6)
target = 4
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + (right-left)/2
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
print(trunc(middle))
}
nums = c(1, 3, 5, 6)
target = 2
searchInsert(nums = nums, target = target)
nums = c(1, 3, 5, 6)
target = 2
n <- length(nums)
left <- 1
right <- n
middle <- left + (right-left)/2
nums[middle]
target
nums[middle] > target
right <- middle-1
left <= right
nums = c(1, 3, 5, 6)
target = 2
n <- length(nums)
left <- 1
right <- n
left <= right
middle <- left + trunc((right-left)/2)
nums[middle] > target
right <- middle-1
left <= right
middle <- left + trunc((right-left)/2)
right <- middle-1
left <= right
print(trunc(middle))
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
print(trunc(middle))
}
nums = c(1, 3, 5, 6)
target = 2
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
print(trunc(middle))
}
nums = c(1, 3, 5, 6)
target = 4
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
print(trunc(middle))
}
nums = c(1, 3, 5, 6)
target = 7
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
print(trunc(middle))
}
nums = c(1, 3, 5, 6)
target = 0
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
if(target>max(nums)){
print(length(nums)+1)
}else if(target<min(nums)){
print(1)
}else{
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
print(trunc(middle))
}
}
nums = c(1, 3, 5, 6)
target = 0
searchInsert(nums = nums, target = target)
searchInsert <- function(nums, target){
n <- length(nums)
left <- 1
right <- n
if(target>max(nums)){
print(length(nums)+1)
}else if(target<min(nums)){
print(1)
}else{
while(left <= right){
middle <- left + trunc((right-left)/2)
if(nums[middle] > target){
right <- middle-1
}else if(nums[middle] < target){
left <- middle+1
}else{
print(middle)
break
}
}
print(trunc(middle))
}
}
nums = c(1, 3, 5, 6)
target = 9
searchInsert(nums = nums, target = target)
maxSubArray <- function(nums){
n <- length(nums)
for(i in 2:n){
if(nums[i-1]>0) nums[i] <- nums[i-1] + nums[i]
}
print(max(nums))
}
nums <- [-2, 1, -3, 4, -1, 2, 1, -5, 4]
maxSubArray(nums = nums)
nums <- [-2, 1, -3, 4, -1, 2, 1, -5, 4]
n <- length(nums)
i=2
if(nums[i-1]>0) nums[i] <- nums[i-1] + nums[i]
nums <- [-2, 1, -3, 4, -1, 2, 1, -5, 4]
nums <- [-2, 1, -3, 4, -1, 2, 1, -5, 4]
n <- length(nums)
nums <- [-2, 1, -3, 4, -1, 2, 1, -5, 4]
maxSubArray <- function(nums){
n <- length(nums)
for(i in 2:n){
if(nums[i-1]>0) nums[i] <- nums[i-1] + nums[i]
}
print(max(nums))
}
nums <- c(-2, 1, -3, 4, -1, 2, 1, -5, 4)
maxSubArray(nums = nums)
s = "Hello World"
s <- strsplit(s, split = " ")
s = "Hello World"
s <- strsplit(s, split = " ")[[1]]
s.list <- list()
for(i in 1:length(s)){
s.list <- rbind(s.list, strsplit(s[i], split = "")[[1]])
}
i=1
strsplit(s[i], split = "")[[1]]
c(strsplit(s[i], split = "")[[1]])
s.list <- list()
for(i in 1:length(s)){
s.list <- rbind(s.list, c(strsplit(s[i], split = "")[[1]]))
}
lengthOfLastWord(s){
s = "Hello World"
s <- strsplit(s, split = " ")[[1]]
last <- s[length(s)]
last.length <- length(strsplit(last, split = "")[[1]])
print(last.length)
}
s = "hiauhbga auiha aihgoa"
lengthOfLastWord(s = s)
lengthOfLastWord <- function(s){
s = "Hello World"
s <- strsplit(s, split = " ")[[1]]
last <- s[length(s)]
last.length <- length(strsplit(last, split = "")[[1]])
print(last.length)
}
s = "hiauhbga auiha aihgoa"
lengthOfLastWord(s = s)
lengthOfLastWord <- function(s){
s <- strsplit(s, split = " ")[[1]]
last <- s[length(s)]
last.length <- length(strsplit(last, split = "")[[1]])
print(last.length)
}
s = "hiauhbga auiha aihgoa"
lengthOfLastWord(s = s)
smallestRepunitBivByK <- function(k){
if(k %% 2 == 0){
print(-1)
}else if(k %% 5 ==0){
print(-1)
}else{
num <- 1
while(num %% k != 0){
num <- num*10+1
}
print(length(strsplit(as.character(num), split = "")[[1]]))
}
}
smallestRepunitBivByK(k=k)
k = 1
smallestRepunitBivByK(k=k)
k = 6
smallestRepunitBivByK(k=k)
k = 9
smallestRepunitBivByK(k=k)
k = 9
num <- 1
num %% k != 0
num <- num*10+1
111111111/9
