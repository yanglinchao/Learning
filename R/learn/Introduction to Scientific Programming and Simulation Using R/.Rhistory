runif(4)
View(speed)
mod <- depmix(response = rt + pacc ~ 2, data = speed, nstates = 2, trstart = runif(4))
View(speed)
fm <- fit(mod, emc = em.control(rand = FALSE))
fm
summary(fm)
mod <- depmix(response = list(rt ~ 1, corr ~ 1), data = speed, nstates = 2, trstart = runif(4))
mod <- depmix(response = list(rt ~ 1, corr ~ 1), data = speed, nstates = 2, family = list(gaussian(), multinomial("identity")), ntimes = c(168, 134, 137))
mod
View(speed)
set.seed(1)
fm <- fit(mod)
install.packages("HiddenMarkov")
x <- seq(0, 9, 1)
y <- c(1, 1, 1, -1, -1, -1, 1, 1, 1, -1)
plot(x, y)
library(ggplot2)
install.packages("ggplot2")
ln((1-0.3)/0.3)/2
log((1-0.3)/0.3)/2
ln1
log1
log(1)
e <- exp(1)
e^(-0.4236)
*0.1
e^(-0.4236)*0.1
log((1-0.3)/0.3)/2
a1 <- log((1-0.3)/0.3)/2
d1 <- rep(0.1, 10)
e <- exp(1)
error1 <- 0.3
f <- rep(1, 10)
error1 <- sum(h1 != f)/10
h1 <- c(1, 1, 1, 1, 1, 1, -1, -1, -1, 1)
error1 <- sum(h1 != f)/10
a <- function(error){
result <- 0.5*log((1-error)/error)
return(result)
}
error <- function(h, f){
result <- sum(h != f)/10
return(result)
}
a <- function(error){
result <- 0.5*log((1-error)/error)
return(result)
}
error1 <- error(h1, f)
a1 <- a(error1)
d1 <- rep(0.1, 10)
d <- function(fd, a, y, h){
result <- fd*(e^(-(a*y*h)))
return(result)
}
d <- function(fd, a, f, h){
result <- fd*(e^(-(a*f*h)))
return(result)
}
d2 <- d(d1, a1, f, h1)
f*h1
f*h1*a1
e^(f*h1*a1)
e^(-f*h1*a1)
d1*e^(-f*h1*a1)
d2
p <- c(0.0715, 0.0715, 0.0715, 0.0715, 0.0715, 0.0715, 0.166, 0.166, 0.166, 0.0715)
d2/p
Z <- function(d, a, f, h){
result <- sum(d*(e^((-1)*a*f*h)))
return(result)
}
Z <- function(d, a, f, h){
result <- sum(d*(e^((-1)*a*f*h)))
return(result)
}
d <- function(fd, a, f, h, Z){
result <- fd*(e^(-(a*f*h)))/Z
return(result)
}
Z1 <- Z(d1, a1, f, h1)
d2 <- d(d1, a1, f, h1, Z1)
d2
error <- function(h, f, d){
result <- sum(as.numeric(h != f)*d)
return(result)
}
error1 <- error(h1, f)
error1 <- error(h1, f, d1)
h2.5 <- c(1, 1, 1, 1, 1, 1, -1, -1, -1, 1)
h5.5 <- c(1, 1, 1, -1, -1, -1, -1, -1, -1, 1)
h8.5 <- c(1, 1, 1, -1, -1, -1, 1, 1, 1, 1)
error(h2.5, f, d2)
error(h5.5, f, d2)
error(h8.5, f, d2)
h2 <- h8.5
error2 <- error(h2, f, d2)
x <- seq(0, 9, 10)
x <- seq(from = 0, to = 9, 1)
a2 <- a(error2)
Z2 <- Z(d2, a2, f, h2)
d3 <- d(d2, a2, f, h2, Z2)
d3
error(h2.5, f, d3)
error(h5.5, f, d3)
error(h8.5, f, d3)
x*a1
x*a1+x*a2
2.5*a1
2.5*a1+8.5*a2
2.5*a1
y*a1
y <- c(1, 1, 1, -1, -1, -1, 1, 1, 1, -1)
y*a1
a1*h2.5 + a2*h8.5
error(h2.5, f, d3)
error(h5.5, f, d3)
error(h8.5, f, d3)
d3
d1 <- rep(0.1, 10)
h1 <- h2.5
error1 <- error(h1, f, d1)
error1
a1 <- a(error1)
a1
Z1 <- Z(d1, a1, f, h1)
Z1
d2 <- d(d1, a1, f, h1, Z1)
d2
error(h2.5, f, d2)
error(h5.5, f, d2)
error(h8.5, f, d2)
h2 <- h8.5
error2 <- error(h2, f, d2)
error2
a2 <- a(error2)
a2
Z2 <- Z(d2, a2, f, h2)
Z2
Z2 <- Z(d2, a2, f, h2)
d3 <- d(d2, a2, f, h2, Z2)
d3
error(h2.5, f, d3)
error(h5.5, f, d3)
error(h8.5, f, d3)
d3 <- d(d2, a2, f, h2, Z2)
error(h2.5, f, d3)
error(h5.5, f, d3)
error(h8.5, f, d3)
f <- c(1, 1, 1, -1, -1, -1, 1, 1, 1, -1)   #原始函数
d1 <- rep(0.1, 10)
h1 <- h2.5
error1 <- error(h1, f, d1)
error1
as.numeric(h1 != f)
h1 <- h2.5
as.numeric(h1 != f)
h1!=f
h1==f
h1
f
h2.5 <- c(1, 1, 1, -1, -1, -1, -1, -1, -1, -1)   #阈值为2.5时判断结果
h5.5 <- c(1, 1, 1, 1, 1, 1, -1, -1, -1, -1)   #阈值为5.5时判断结果
h8.5 <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, -1)   #阈值为8.5时判断结果
h1 <- h2.5
error1 <- error(h1, f, d1)
error1
#Step1
d1 <- rep(0.1, 10)
h1 <- h2.5
error1 <- error(h1, f, d1)
a1 <- a(error1)
Z1 <- Z(d1, a1, f, h1)
#Step2
d2 <- d(d1, a1, f, h1, Z1)
error(h2.5, f, d2)
error(h5.5, f, d2)
error(h8.5, f, d2)
h2 <- h8.5
error2 <- error(h2, f, d2)
a2 <- a(error2)
Z2 <- Z(d2, a2, f, h2)
#Step3
d3 <- d(d2, a2, f, h2, Z2)
error(h2.5, f, d3)
error(h5.5, f, d3)
error(h8.5, f, d3)
Z2
h2.5 <- c(1, 1, 1, -1, -1, -1, -1, -1, -1, -1)   #阈值为2.5时判断结果
h5.5 <- c(1, 1, 1, 1, 1, 1, -1, -1, -1, -1)   #阈值为5.5时判断结果
h8.5 <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, -1)   #阈值为8.5时判断结果
d3
h5.5 <- c(-1, -1, -1, -1, -1, 1, 1, 1, 1, 1)   #阈值为5.5时判断结果
error(h2.5, f, d3)
error(h5.5, f, d3)
error(h8.5, f, d3)
h5.5 <- c(-1, -1, -1, -1, -1, -1, 1, 1, 1, 1)   #阈值为5.5时判断结果
error(h2.5, f, d3)
error(h5.5, f, d3)
error(h8.5, f, d3)
error3 <- error(h3, f, d3)
h3 <- h5.5
error3 <- error(h3, f, d3)
a3 <- a(error3)
Z3 <- Z(d3, a3, f, h3)
h1*a1+h2*a2+h3*a3
Z3
a3
d3
a2
h3
error3
a3
Z3
d3 <- d(d2, a2, f, h2, Z2)
h3 <- h5.5
h1*a1+h2*a2+h3*a3
#题目
x <- seq(from = 0, to = 9, by = 1)
y <- c(1, 1, 1, -1, -1, -1, 1, 1, 1, -1)
e <- exp(1)   #自然对数
f <- c(1, 1, 1, -1, -1, -1, 1, 1, 1, -1)   #原始函数
error <- function(h, f, d){
result <- sum(as.numeric(h != f)*d)
return(result)
}   #误差计算
a <- function(error){
result <- 0.5*log((1-error)/error)
return(result)
}   #系数计算
Z <- function(d, a, f, h){
result <- sum(d*(e^((-1)*a*f*h)))
return(result)
}   #规范化因子计算
d <- function(fd, a, f, h, Z){
result <- fd*(e^(-(a*f*h)))/Z
return(result)
}   #更新分布计算
h2.5 <- c(1, 1, 1, -1, -1, -1, -1, -1, -1, -1)   #阈值为2.5时判断结果
h5.5 <- c(-1, -1, -1, -1, -1, -1, 1, 1, 1, 1)   #阈值为5.5时判断结果
h8.5 <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, -1)   #阈值为8.5时判断结果
#Step1
d1 <- rep(0.1, 10)
h1 <- h2.5
error1 <- error(h1, f, d1)
a1 <- a(error1)
Z1 <- Z(d1, a1, f, h1)
#Step2
d2 <- d(d1, a1, f, h1, Z1)
error(h2.5, f, d2)
error(h5.5, f, d2)
error(h8.5, f, d2)
h2 <- h8.5
error2 <- error(h2, f, d2)
a2 <- a(error2)
Z2 <- Z(d2, a2, f, h2)
h1*a1+h2*a2
install.packages("AMORE")
install.packages("AMORE")
ann_newff <- newff(c(6, 4, 2, 1), hidden.layer = "sigmoid", method = "ADAPTgd")
library(AMORE)
ann_newff <- newff(c(6, 4, 2, 1), hidden.layer = "sigmoid", method = "ADAPTgd")
ann_newff <- newff(c(6, 4, 2, 1), learning.rate.global = 0.01, hidden.layer = "sigmoid", method = "ADAPTgd")
library(AMORE)
P <- matrix(sample(seq(-1, 1, length = 1000), 100, replace = FALSE), ncol = 1)
View(P)
target <- P^2
net <- newff(n.neurons = c(1, 3, 2, 1), learning.rate.global = 1e-2, momentum.global = 0.5, error.criterium = "LMS", Stao = NA, hidden.layer = "tansing", output.layer = "purelin", method = "ADAPTgdwm")
net <- newff(n.neurons = c(1, 3, 2, 1), learning.rate.global = 1e-2, momentum.global = 0.5, error.criterium = "LMS", Stao = NA, hidden.layer = "tansig", output.layer = "purelin", method = "ADAPTgdwm")
result <- train(net, P, target, error.criterium = "LMS", report = TRUE, show.step = 100, n.shows = 5)
y <- sim(result$net, P)
plot(P, y, col = "blue", pch = "+")
install.packages("depmix4")
library(depmix4)
install.packages("depmix4")
install.packages("depmix4")
library(tileHMM)
state.names <- c("one", "two")
transition <- c(1, 2)
location <- c(1, 2)
transition <- c(0.1, 0.02)
location <- c(1, 2)
scale <- c(1, 1)
df <- c(4, 6)
model <- getHMM(list(a = transition, mu = location, sigma = scale, nu = df), state.names)
obs <- sampleSeq(model, 100)
fwd <- forward(model, obs)
fwd$logProb
bwd <- backward(model, obs)
post <- bwd + fwd$alpha.scaled
View(post)
post <- t(t(post) - apply(post, 2, logSum))
View(post)
state.seq <- state.names[apply(post, 2, which.max)]
state.seq
load("C:/Users/ylc/nutstore/1-MasterDissertation/experiment/HL2_02.RData")
library(tileHMM)
model_hmm_hl.fit <- viterbiEM(model_hmm_hl, obs = flist_hmm_train_hl)
model_hmm_hl <- hmm.setup(flist_hmm_train_hl, df = 40)
model_hmm_hl.fit <- viterbiEM(model_hmm_hl, flist_hmm_train_hl)
model_hmm_normal <- hmm.setup(flist_hmm_train_normal, df = 40)
model_hmm_normal.fit <- viterbiEM(model_hmm_normal, flist_hmm_train_normal)
#隐马尔科夫
flist_test <- list()
for(i in 1:nrow(fdata_test)){
flist_test[[i]] <- as.numeric(fdata_test[i, -c(1, 2)])
}
hmm_pre_hl <- sapply(flist_test, function(vector){
result <- forward(model_hmm_hl.fit, vector)$logProb
return(result)
})
hmm_pre_normal <- sapply(flist_test, function(vector){
result <- forward(model_hmm_normal.fit, vector)$logProb
return(result)
})
result_hmm <- as.numeric(hmm_pre_hl > hmm_pre_normal)
result_hmm[which(result_hmm == 0)] <- -1
#汇总结果
#r_ann <- acc_ann/(acc_ann+acc_svm+acc_hmm)
#r_svm <- acc_svm/(acc_ann+acc_svm+acc_hmm)
#r_hmm <- acc_hmm/(acc_ann+acc_svm+acc_hmm)
result <- data.frame(height = fdata_test$height, true = fdata_test$hl, ann = result_ann, svm = result_svm, hmm = result_hmm, pre = NA)
#result$pre <- as.numeric((r_ann*result_ann+r_svm*result_svm+r_hmm*result_hmm) > 0)
result$pre <- as.numeric((result_ann+result_svm+result_hmm) > 0)
result$pre[which(result$pre == 0)] <- -1
table(result$true, result$pre)
table(result$true, result$ann)
table(result$true, result$svm)
table(result$true, result$hmm)
acc <- function(true, pred){
t <- table(true, pred)
acc <- (t[1, 1] + t[2, 2])/(t[1, 1] + t[1, 2]+ t[2, 1] + t[2, 2])
pre <- t[2, 2]/(t[2, 1] + t[2, 2])
rec <- t[2, 2]/(t[1, 2] + t[2, 2])
result <- c(acc, pre, rec)
return(result)
}
acc(result$true, result$pre)
acc(result$true, result$ann)
acc(result$true, result$svm)
acc(result$true, result$hmm)
result$fheight <- NA
result$fheight[which(result$height >= 2 & result$height < 3)] <- 2
result$fheight[which(result$height >= 3 & result$height < 4)] <- 3
result$fheight[which(result$height >= 4 & result$height < 5)] <- 4
result$fheight[which(result$height >= 5 & result$height < 6)] <- 5
result$fheight[which(result$height >= 6 & result$height < 7)] <- 6
result$fheight[which(result$height >= 7)] <- 7
two <- acc(subset(result, fheight == 2)$true, subset(result, fheight == 2)$pre)
three <- acc(subset(result, fheight == 3)$true, subset(result, fheight == 3)$pre)
four <- acc(subset(result, fheight == 4)$true, subset(result, fheight == 4)$pre)
five <- acc(subset(result, fheight == 5)$true, subset(result, fheight == 5)$pre)
six <- acc(subset(result, fheight == 6)$true, subset(result, fheight == 6)$pre)
seven <- acc(subset(result, fheight == 7)$true, subset(result, fheight == 7)$pre)
accresult <- data.frame(matrix(c(two, three, four, five, six, seven), nrow = 6, ncol = 3, byrow = TRUE))
names(accresult) <- c("acc", "pre", "rec")
row.names(accresult) <- c("2-3", "3-4", "4-5", "5-6", "6-7", ">7")
model_hmm_hl.fit <- viterbi(model_hmm_hl, flist_hmm_train_hl)
model_hmm_hl <- hmm.setup(flist_hmm_train_hl, df = 40)
model_hmm_hl.fit <- baumWelch(model_hmm_hl, obs = flist_hmm_train_hl)
model_hmm_normal <- hmm.setup(flist_hmm_train_normal, df = 40)
model_hmm_normal.fit <- baumWelch(model_hmm_normal, obs = flist_hmm_train_normal)
flist_test <- list()
for(i in 1:nrow(fdata_test)){
flist_test[[i]] <- as.numeric(fdata_test[i, -c(1, 2)])
}
hmm_pre_hl <- sapply(flist_test, function(vector){
result <- forward(model_hmm_hl.fit, vector)$logProb
return(result)
})
hmm_pre_normal <- sapply(flist_test, function(vector){
result <- forward(model_hmm_normal.fit, vector)$logProb
return(result)
})
result_hmm <- as.numeric(hmm_pre_hl > hmm_pre_normal)
result_hmm[which(result_hmm == 0)] <- -1
#汇总结果
#r_ann <- acc_ann/(acc_ann+acc_svm+acc_hmm)
#r_svm <- acc_svm/(acc_ann+acc_svm+acc_hmm)
#r_hmm <- acc_hmm/(acc_ann+acc_svm+acc_hmm)
result <- data.frame(height = fdata_test$height, true = fdata_test$hl, ann = result_ann, svm = result_svm, hmm = result_hmm, pre = NA)
#result$pre <- as.numeric((r_ann*result_ann+r_svm*result_svm+r_hmm*result_hmm) > 0)
result$pre <- as.numeric((result_ann+result_svm+result_hmm) > 0)
result$pre[which(result$pre == 0)] <- -1
table(result$true, result$pre)
table(result$true, result$ann)
table(result$true, result$svm)
table(result$true, result$hmm)
acc <- function(true, pred){
t <- table(true, pred)
acc <- (t[1, 1] + t[2, 2])/(t[1, 1] + t[1, 2]+ t[2, 1] + t[2, 2])
pre <- t[2, 2]/(t[2, 1] + t[2, 2])
rec <- t[2, 2]/(t[1, 2] + t[2, 2])
result <- c(acc, pre, rec)
return(result)
}
acc(result$true, result$pre)
acc(result$true, result$ann)
acc(result$true, result$svm)
acc(result$true, result$hmm)
result$fheight <- NA
result$fheight[which(result$height >= 2 & result$height < 3)] <- 2
result$fheight[which(result$height >= 3 & result$height < 4)] <- 3
result$fheight[which(result$height >= 4 & result$height < 5)] <- 4
result$fheight[which(result$height >= 5 & result$height < 6)] <- 5
result$fheight[which(result$height >= 6 & result$height < 7)] <- 6
result$fheight[which(result$height >= 7)] <- 7
two <- acc(subset(result, fheight == 2)$true, subset(result, fheight == 2)$pre)
three <- acc(subset(result, fheight == 3)$true, subset(result, fheight == 3)$pre)
four <- acc(subset(result, fheight == 4)$true, subset(result, fheight == 4)$pre)
five <- acc(subset(result, fheight == 5)$true, subset(result, fheight == 5)$pre)
six <- acc(subset(result, fheight == 6)$true, subset(result, fheight == 6)$pre)
seven <- acc(subset(result, fheight == 7)$true, subset(result, fheight == 7)$pre)
accresult <- data.frame(matrix(c(two, three, four, five, six, seven), nrow = 6, ncol = 3, byrow = TRUE))
names(accresult) <- c("acc", "pre", "rec")
row.names(accresult) <- c("2-3", "3-4", "4-5", "5-6", "6-7", ">7")
View(result)
View(accresult)
library(AMORE)
library(e1071)
library(tileHMM)
library(psych)
install.packages("psych")
install.packages("psych")
library(psych)
install.packages("depmix4")
library(depmix4)
library(seqHMM)
data("mvad", package = "TraMineR")
mvad_alphabet <- c("emplyment", "FE", "HE", "joblessness", "school", "training")
mvad_labels <- c("employment", "further education", "higher education", "joblessness", "school", "training")
mvad_scodes <- c("EM", "FE", "HE", "JL", "SC", "TR")
mvad_seq <- seqdef(mvad, 17:86, alphabet = mvad_alphabet, states = mvad_scodes, labels = mvad_labels, xtstep = 6)
mvad_alphabet <- c("employment", "FE", "HE", "joblessness", "school", "training")
mvad_seq <- seqdef(mvad, 17:86, alphabet = mvad_alphabet, states = mvad_scodes, labels = mvad_labels, xtstep = 6)
View(mvad_seq)
View(mvad)
emiss <- matrix(NA, nrow = 4, ncol = 6)
emiss[1, ] <- seqstatf(mvad_seq[, 1:12])[, 2] + 1
emiss[2, ] <- seqstatf(mvad_seq[, 13:24])[, 2] + 1
emiss[3, ] <- seqstatf(mvad_seq[, 25:48])[, 2] + 1
emiss[4, ] <- seqstatf(mvad_seq[, 49:70])[, 2] + 1
View(emiss)
emiss <- emiss/rowSums(emiss)
tr <- matrix(
c(0.80, 0.10, 0.05, 0.05,
0.05, 0.80, 0.10, 0.05,
0.05, 0.05, 0.80, 0.10,
0.05, 0.05, 0.10, 0.80),
nrow = 4, ncol = 4, byrow = TRUE
)
View(tr)
init <- c(0.3, 0.3, 0.2, 0.2)
View(mvad_seq)
init_hmm_mvad2 <- build_hmm(observations = mvad_seq, transition_probs = tr, emission_probs = emiss, initial_probs = init)
data("mhmm_biofam")
data("mhmm_biofam")
load("C:/Users/ylc/nutstore/1-MasterDissertation/experiment/HL2_02.RData")
model_ann_fit$net
sim_ann <- sim(model_ann_fit$net, fdata_test[, -c(1, 2)])
library(AMORE)
library(e1071)
library(tileHMM)
library(psych)
model_ann_fit$net
sim_ann <- sim(model_ann_fit$net, fdata_test[, -c(1, 2)])
a <- c(1,2, 3, 4, 5)
b <- c(1, 2, 3)
table(a, b)
b <- c(1, 2, 3, 1, 2)
table(a, b)
library(tileHMM)
state.names <- c("one", "two")
transition <- c(0.1, 0.02)
location <- c(1, 2)
scale <- c(1, 1)
df <- c(4, 6)
model <- getHMM(list(a= transition, mu = location, sigma = scale, nu = df), state.names)
obs <- sampleSeq(model, 100)
fwd <- forward(model, obs)
fwd$logProb
exp(fwd$logProb)
setwd("C:/Users/ylc/nutstore/R-work/learn/Introduction to Scientific Programming and Simulation Using R")
#12.1
newton <- function(f3, x0, tol = 1e-9, n.max = 100){
#Newton's method for optimisation, starting at x0
#f3 is a function that given x returns the vector
#(f(x), f'(x), f''(x)), for some f
x <- x0
f3.x <- f3(x)
n <- 0
while((abs(f3.x[2]) > tol) & (n < n.max)){
x <- x - f3.x[2]/f3.x[3]
f3.x <- f3(x)
n <- n+1
}
if(n == n.max){
cat('newton failed to converge\n')
}else{
return(x)
}
}
gamma.2.3 <- function(x){
#gamma(2, 3) density
if(x < 0) return(c(0, 0, 0))
if(x == 0) return(c(0, 0, NaN))
y <- exp(-2*x)
return(c(4*x^2*y, 8*x*(1-x)*y, 8*(1-2*x^2)*y))
}
return(gamma.2.3, 0.25)
gamma.2.3(5)
