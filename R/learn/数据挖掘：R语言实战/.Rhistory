require(ggplot2)
attach(diamonds)
data("diamonds")
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds), 100)]
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = dsmall, colour = color)
str(diamonds)
qplot(carat, price, data = dsmall, shape = cut)
require(ggplot2)
str(diamonds)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds)   #钻石价格和重量之间的关系
qplot(carat, price, data = diamonds)   #钻石价格的指数和重量的指数之间的关系
qplot(log(carat), log(price), data = diamonds)   #钻石价格的指数和重量的指数之间的关系
qplot(carat, x*y*z, data = diamonds)   #钻石体积(x*y*z)与重量的关系
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = dsmall, colour = color)   #根据变量color进行分类，每类有不同的颜色
qolot(carat, price, data = dsmall, shape = cut)   #根据变量cut进行分类，每类有不同的点的形状
qpolot(carat, price, data = dsmall, shape = cut)   #根据变量cut进行分类，每类有不同的点的形状
qplot(carat, price, data = dsmall, shape = cut)   #根据变量cut进行分类，每类有不同的点的形状
qplot(carat, price, data = dsmall, colour = color, shape = cut)
qplot(carat, price, data = diamonds, alpha = I(1/10))  #透明度为1/10
qplot(carat, price, data = diamonds, alpha = I(1/100))   #透明度为1/100
qplot(carat, price, data = dsmall, geom = c("point", "smooth"))
setwd("F:/nutstore/R-work/learn")
install.packages("RODBC")
library(RODBC)
channel <- odbcConnect("mysql_data", uid = "root", pwd = "147258")
vendors <- sqlFetch(channel, vendors)
vendors <- sqlFetch(channel, "vendors")
View(vendors)
data <- read.csv("1.csv")
table(data)
K <- 10
results <- c(rep(NA, K))
rnorm(100, mean = 0, sd = 1)
apply(mydata[, 2:4], MARGIN = 1, fun = sum)
apply(mydata[, 2:4], MARGIN = 1, FUN = sum)
mydata <- matrix(rnorm, nrow = 10, ncol = 10)
mydata <- matrix(mydata, nrow = 10, ncol = 10)
mydata <- rnorm(100, mean = 0, sd = 1)
mydata <- matrix(mydata, nrow = 10, ncol = 10)
apply(mydata[, 2:4], MARGIN = 1, FUN = sum)
mydata <- rnorm(100, mean = 0, sd = 1)
mydata <- matrix(mydata, nrow = 10, ncol = 10)
K <- 10
results <- c(rep(NA, K))
for(k in 1:K){
max_k <- apply(mydata[, 1:k], 1, FUN = max)
results[i] <- max_k
}
mydata <- rnorm(100, mean = 0, sd = 1)
mydata <- matrix(mydata, nrow = 10, ncol = 10)
K <- 10
results <- c(rep(NA, K))
for(k in 2:K){
max_k <- apply(mydata[, 2:k], 1, FUN = max)
results[i] <- max_k
}
mydata <- rnorm(100, mean = 0, sd = 1)
mydata <- matrix(mydata, nrow = 10, ncol = 10)
K <- 10
results <- c(rep(NA, K))
for(k in 2:K){
max_k <- apply(mydata[, 1:k], 1, FUN = max)
results[i] <- max_k
}
mydata <- rnorm(100, mean = 0, sd = 1)
mydata <- matrix(mydata, nrow = 10, ncol = 10)
K <- 10
results <- c(rep(NA, K))
for(k in 2:K){
max_k <- apply(mydata[, 1:k], 1, FUN = max)
results[k] <- max_k
}
results
mydata <- rnorm(100, mean = 0, sd = 1)
mydata <- matrix(mydata, nrow = 10, ncol = 10)
K <- 10
results <- c(rep(NA, K))
for(k in 1:K){
max_k <- apply(mydata[, 1:k], 1, FUN = max)
results[k] <- max_k
}
a <- c(6.56, 6.49, 6.7, 6.56, 6.24, 6.25, 6.19, 5.99, 6.26, 6.2)
b <- c(6.04, 5.97, 6.16, 6.04, 5.74, 5.75, 5.69, 5.51, 5.76, 5.70)
c < (b-a)^2
c < b-a
c <- b-a
d <- c^2
sqrt(sum(d)/length(d))
setwd("F:/nutstore/R-work/learn/数据挖掘：R语言实战")
install.packages("e1071")
library(e1071)
library(datasets)
data("iris")
model = svm(Species ~ ., data = iris)
x <- iris[, -5]
y <- iris[, 5]
model <- svm(x, y, kernel = "radial", gamma = if(is.vector(x))1else1/ncol(x))   #第二种建立模式，b
model <- svm(x, y, kernel = "radial", gamma = if(is.vector(x))1 else 1/ncol(x))   #第二种建立模式，b
model <- svm(x, y, kernel = "radial", gamma = if(is.vector(x)) 1 else 1/ncol(x))   #第二种建立模式，b
library(datasets)
data("iris")
library(e1071)
model <- svm(Species ~ ., data = iris)   #第一种建立模式，a
x <- iris[, -5]
y <- iris[, 5]
model <- svm(x, y, kernel = "radial", gamma = if(is.vector(x)) 1 else 1/ncol(x))   #第二种建立模式，b
summary(model)
predict_data <- iris[, 1:4]
pred <- predict(model, predict_data)
predict_data <- iris[, 1:4]   #确认需要进行预测的样本特征矩阵
pred <- predict(model, predict_data)   #根据模型model对x数据进行预测
pred[sample(1:150, 8)]   #随机挑选8个预测结果进行展示
predict_data <- iris[, 1:4]   #确认需要进行预测的样本特征矩阵
pred <- predict(model, predict_data)   #根据模型model对x数据进行预测
pred[sample(1:150, 3)]   #随机挑选3个预测结果进行展示
table(pred, y)   #模型预测精度展示
attach(iris)
x <- subset(iris, select = -Species)  #确定特征变量为数据集iris中除去Species的其他项
y <- Species   #确定结果变量为数据集iris中的Species项
type <- c("C-classification", "nu-classification", "one-classification")   #确定要使用的分类格式
kernel <- c("linear", "polynomial", "radial", "sigmoid")   #确定将要使用的核函数
pred <- array(0, dim = c(150, 3, 4))   #初始化预测结果矩阵的三维长度为150, 3, 4
accuracy <- matrix(0, 3, 4)   #初始化模型精准度矩阵的两维分别为3, 4
yy <- as.integer(y)   #为方便精度计算，将结果变量数量化为1, 2, 3
for(i in 1:3){   #确认j影响的维度代表核函数
pred[, i, j] <- predict(svm(x, y, type = type[i], kernel = kernel[j]), x)   #对每一模型进行预测
if(i > 2)
accuracy[i, j] = sum(pred[, i, j] != 1)
else
accuracy[i, j] = sum(pred[, i, j] != yy)
}
}
dimnames(accuracy) = list(type, kernel)   #确定模型精度变量的列名和行名
attach(iris)
x <- subset(iris, select = -Species)  #确定特征变量为数据集iris中除去Species的其他项
y <- Species   #确定结果变量为数据集iris中的Species项
type <- c("C-classification", "nu-classification", "one-classification")   #确定要使用的分类格式
kernel <- c("linear", "polynomial", "radial", "sigmoid")   #确定将要使用的核函数
pred <- array(0, dim = c(150, 3, 4))   #初始化预测结果矩阵的三维长度为150, 3, 4
accuracy <- matrix(0, 3, 4)   #初始化模型精准度矩阵的两维分别为3, 4
yy <- as.integer(y)   #为方便精度计算，将结果变量数量化为1, 2, 3
for(i in 1:3){   #确认j影响的维度代表核函数
for(j in 1:4){   #确认j影响的维度代表核函数
pred[, i, j] <- predict(svm(x, y, type = type[i], kernel = kernel[j]), x)   #对每一模型进行预测
if(i > 2)
accuracy[i, j] = sum(pred[, i, j] != 1)
else
accuracy[i, j] = sum(pred[, i, j] != yy)
}
}
dimnames(accuracy) = list(type, kernel)   #确定模型精度变量的列名和行名
detach(iris)
table(pred[, 1, 3], y)
plot(cmdscale(dist(iris[, -5])), col = c("lightgrary", "black", "gray"))[as.integer(iris[, 5])], pch = c("o", "+")[1:150 %in% model$index + 1]  #绘制模型分类散点图
legend(2, -0.8, c("setosa", "versicolor", "vorginica"), col = c("lightgray", "black", "gray"), lty = 1)
plot(cmdscale(dist(iris[, -5])), col = c("lightgrary", "black", "gray"))[as.integer(iris[, 5])], pch = c("o", "+")[1:150 %in% model$index + 1])  #绘制模型分类散点图
legend(2, -0.8, c("setosa", "versicolor", "vorginica"), col = c("lightgray", "black", "gray"), lty = 1)
plot(cmdscale(dist(iris[, -5])), col = c("lightgrary", "black", "gray")[as.integer(iris[, 5])], pch = c("o", "+")[1:150 %in% model$index + 1])  #绘制模型分类散点图
plot(cmdscale(dist(iris[, -5])), col = c("lightgray", "black", "gray")[as.integer(iris[, 5])], pch = c("o", "+")[1:150 %in% model$index + 1])  #绘制模型分类散点图
legend(2, -0.8, c("setosa", "versicolor", "vorginica"), col = c("lightgray", "black", "gray"), lty = 1)
legend(1, 2.5, c("setosa", "versicolor", "virginica"), col = c("lightgray", "black", "gray"), lty = 1)
plot(model, iris, Petal.Width ~ Petal.Length, fill = FALSE, symbolPalette = c("lightgray", "black", "grey"), svSymbol = "+")   #绘制模型类别关于花萼宽度和长度的分类情况
legend(1, 2.5, c("setosa", "versicolor", "virginica"), col = c("lightgray", "black", "gray"), lty = 1)
plot(model, iris, Petal.Width ~ Petal.Length, fill = FALSE, symbolPalette = c("lightgray", "black", "grey"), svSymbol = c("+"))   #绘制模型类别关于花萼宽度和长度的分类情况
legend(1, 2.5, c("setosa", "versicolor", "virginica"), col = c("lightgray", "black", "gray"), lty = 1)
data("iris")
data("iris")
model <- svm(Species ~ ., data = iris)
plot(model, iris, Petal.Width ~ Petal.Length, fill = FALSE, symbolPalette = c("lightgray", "black", "grey"), svSymbol = c("+"))   #绘制模型类别关于花萼宽度和长度的分类情况
legend(1, 2.5, c("setosa", "versicolor", "virginica"), col = c("lightgray", "black", "gray"), lty = 1)
wts <- c(1, 100, 100)   #确定各类别的比重为1:100:100
names(wts) <- c("setosa", "versicolor", "virginica")   #确定各个比重对应的类别
model2 <- svm(x, y, class.weights = wts)
pred2 <- predict(model2, x)
table(pred2, y)
wts <- c(1, 500, 500)   #确定各类别的比重为1:100:100
names(wts) <- c("setosa", "versicolor", "virginica")   #确定各个比重对应的类别
model3 <- svm(x, y, class.weights = wts)
pred3 <- predict(model3, x)
table(pred3, y)
wine <- read.table("winequality.txt", row.names = FALSE, header = FALSE, sep = ";")
wine <- read.table("winequality.txt", header = FALSE, sep = ";")
View(wine)
names(wine) <- c("fixed acidity", "volatile acidity", "citric acid", "residual sugar", "chlorides", "free sulfur dioxide", "total sulfur dioxide", "density", "pH", "sulphates", "alcohol", "quality")
View(wine)
names(wine) <- c("FixedAcidity", "VolatileAcidity", "CitricAcid", "ResidualSugar", "Chlorides", "FreeSulfurDioxide", "TotalSulfurDioxide", "Density", "PH", "Sulphates", "Alcohol", "Quality")
View(wine)
wine[which(wine$Quality == 3 && wine$Quality == 4 && wine$Quality == 5)] <- "bad"
View(wine)
wine$Quality[which(wine$Quality == 3 && wine$Quality == 4 && wine$Quality == 5)] <- "bad"
which(wine$Quality == 3 && wine$Quality == 4 && wine$Quality == 5)
wine$Quality[which(wine$Quality == 3] <- "bad"
wine$Quality[which(wine$Quality == 3)] <- "bad"
wine$Quality[which(wine$Quality == 4)] <- "bad"
wine$Quality[which(wine$Quality == 5)] <- "bad"
wine$Quality[which(wine$Quality == 6)] <- "mid"
wine$Quality[which(wine$Quality == 7)] <- "good"
wine$Quality[which(wine$Quality == 8)] <- "good"
wine$Quality[which(wine$Quality == 9)] <- "good"
wine$Quality <- ordered(wine$Quality, levels("bad", "mid", "good"))
wine$Quality <- ordered(wine$Quality, levels = c("bad", "mid", "good"))
wine <- read.table("winequality.txt", header = FALSE, sep = ";")
names(wine) <- c("FixedAcidity", "VolatileAcidity", "CitricAcid", "ResidualSugar", "Chlorides", "FreeSulfurDioxide", "TotalSulfurDioxide", "Density", "PH", "Sulphates", "Alcohol", "Quality")
wine$Quality[which(wine$Quality == 3)] <- "bad"
wine$Quality[which(wine$Quality == 4)] <- "bad"
wine$Quality[which(wine$Quality == 5)] <- "bad"
wine$Quality[which(wine$Quality == 6)] <- "mid"
wine$Quality[which(wine$Quality == 7)] <- "good"
wine$Quality[which(wine$Quality == 8)] <- "good"
wine$Quality[which(wine$Quality == 9)] <- "good"
wine$Quality <- ordered(wine$Quality, levels = c("bad", "mid", "good"))
scale01 <- function(x){
ncol <- dim(x)[2]-1   #提取预处理样本集中特征向量的个数
nrow <- dim(x)[1]   #提取预处理样本集中样本总量
new <- matrix(0, nrow, ncol)
for(i in 1:ncol){
max <- max(x[, i])
min <- min(x[, i])
for(j in 1:nrow){
new[j, i] = x[j, i] - min)/(max-min)
}
}
}
scale01 <- function(x){
ncol <- dim(x)[2]-1   #提取预处理样本集中特征向量的个数
nrow <- dim(x)[1]   #提取预处理样本集中样本总量
new <- matrix(0, nrow, ncol)
for(i in 1:ncol){
max <- max(x[, i])
min <- min(x[, i])
for(j in 1:nrow){
new[j, i] = x[j, i] - min)/(max-min)
}
}
new
}
scale01 <- function(x){
ncol <- dim(x)[2]-1   #提取预处理样本集中特征向量的个数
nrow <- dim(x)[1]   #提取预处理样本集中样本总量
new <- matrix(0, nrow, ncol)
for(i in 1:ncol){
max <- max(x[, i])
min <- min(x[, i])
for(j in 1:nrow){
new[j, i] <- x[j, i] - min)/(max-min)
}
}
new
}
scale01 <- function(x){
ncol <- dim(x)[2]-1   #提取预处理样本集中特征向量的个数
nrow <- dim(x)[1]   #提取预处理样本集中样本总量
new <- matrix(0, nrow, ncol)
for(i in 1:ncol){
max <- max(x[, i])
min <- min(x[, i])
for(j in 1:nrow){
new[j, i] <- x[j, i] - min)/(max-min)
}
}
new
}
scale01 <- function(x){
ncol <- dim(x)[2]-1   #提取预处理样本集中特征向量的个数
nrow <- dim(x)[1]   #提取预处理样本集中样本总量
new <- matrix(0, nrow, ncol)
for(i in 1:ncol){
max <- max(x[, i])
min <- min(x[, i])
for(j in 1:nrow){
new[j, i] <- (x[j, i] - min)/(max-min)
}
}
new
}
set.seed(71)
samp <- sample(1:4898, 3000)   #从总样本集中抽取3000个样本作为训练集
wine[samp, 1:11] <- scale01(wine[samp, ])   #对样本进行预处理
install.packages("nnet")
library(nnet)
set.seed(71)
samp <- sample(1:4898, 3000)   #从总样本集中抽取3000个样本作为训练集
wine[samp, 1:11] <- scale01(wine[samp, ])   #对样本进行预处理
r <- 1/max(abs(wine[samp, 1:11]))   #确定参数rang的变化范围
set.seed(101)
library(nnet)
model1 <- nnet(Quality ~ . , data = wine, subset = samp, size = 4, rang = r, decay = 5e-4, maxit = 200)
x <- subset(wine, select = -Quality)
y <- wine[, 12]
y <- class.ind(y)
summary(model1)
model1$wts
x <- wine[, 1:11]
pred <- predict(model1, x, type = "class")
pred[sample(1:4898, 8)]
pred[sample(1:4898, 3)]
pred[sample(1:4898, 3)]   #挑选3个进行展示
x <- wine[, 1:11]
pred <- predict(model1, x, type = "class")
pred[sample(1:4898, 3)]   #挑选3个进行展示
x <- subset(wine, select = -Quanlity)
x <- subset(wine, select = -Quality)
y <- wine[, 12]
y <- class.ind(y)
set.seed(101)
model2 <- nnet(x, y, decay = 5e-4, maxit = 200, size = 4, rang = r)
pred[sample(1:4898, 4), ]
xt <- wine[, 1:11]
pred <- predict(model2, xt)
dim(pred)   #查看预测结果的维度
pred[sample(1:4989, 4), ]
name <- c("bad", "mid", "good")
name <- c("bad", "mid", "good")
prednew <- max.col(pred)   #每行最大值所在的列
prednewn <- name[prednew]
prednewn[sample(1:4989, 4)]
true <- max.col(y)   #确定真实值每行中最大值所在的列
table(true, prednewn)   #模型预测精度展示
View(y)
View(pred)
View(pred)
summary(prednew)
dim(pred)   #查看预测结果的维度
xt <- wine[, 1:11]
pred <- predict(model2, xt)
dim(pred)   #查看预测结果的维度
pred[sample(1:4898, 4), ]
name <- c("bad", "mid", "good")
prednew <- max.col(pred)   #每行最大值所在的列
prednewn <- name[prednew]
prednewn[sample(1:4898, 4)]
summary(prednew)
pred <- predict(model1, x, type = "class")
pred[sample(1:4898, 3)]   #挑选3个进行展示
View(x)
x <- wine[, 1:11]
pred <- predict(model1, x, type = "class")
pred[sample(1:4898, 3)]   #挑选3个进行展示
table(true, pred)   #模型预测精度展示
set.seed(71)
samp <- sample(1:4898, 3000)   #从总样本集中抽取3000个样本作为训练集
wine[samp, 1:11] <- scale01(wine[samp, ])   #对样本进行预处理
r <- 1/max(abs(wine[samp, 1:11]))   #确定参数rang的变化范围
set.seed(101)
library(nnet)
model1 <- nnet(Quality ~ . , data = wine, subset = samp, size = 4, rang = r, decay = 5e-4, maxit = 200)
set.seed(101)
summary(model1)
x <- subset(wine, select = -Quality)
y <- wine[, 12]
y <- class.ind(y)
set.seed(101)
model2 <- nnet(x, y, decay = 5e-4, maxit = 200, size = 4, rang = r)
x <- wine[, 1:11]
pred <- predict(model1, x, type = "class")
pred[sample(1:4898, 3)]   #挑选3个进行展示
xt <- wine[, 1:11]
pred <- predict(model2, xt)
dim(pred)   #查看预测结果的维度
pred[sample(1:4898, 4), ]
name <- c("bad", "mid", "good")
prednew <- max.col(pred)   #每行最大值所在的列
prednewn <- name[prednew]
prednewn[sample(1:4898, 4)]
table(true, prednewn)   #模型预测精度展示
set.seed(71)
wine <- wine[sample(1:4898, 3000), ]
nrow.wine <- dim(wine)[1]
set.seed(444)
samp <- sample(1:nrow.wine, nrow.wine*0.7)   #从样本中抽取70%作为训练集
wine[samp, 1:11] <- scale01(wine[samp, ])   #对训练集样本进行预处理
wine[-samp, 1:11] <- scale01(wine[-samp, ])   #对测试样本进行预处理
r <- 1/max(abs(wine[samp, 1:11]))   #确定rang的变化范围
n <- length(samp)
err1 <- 0
err2 <- 0
for(i in 1:17){
set.seed(111)
model <- nnet(Quality ~ . , data = wine, maxit = 400, rang = r, size = i, subset = samp, decay = 5e-4)
err1[i] <- sum(predict(model, wine[samp, 1:11], type = 'class') != wine[samp, 12])/n
err2[i] <- sum(predict(model, wine[-samp, 1:11], type = 'class') != wine[-samp, 12])/(nrow.wine - n)
}
